{
	"name": "@codeeditorland/pull-request-github",
	"displayName": "%displayName%",
	"description": "%description%",
	"main": "./dist/extension",
	"browser": "./dist/browser/extension",
	"scripts": {
		"browsertest": "yarn run browsertest:preprocess && node ./dist/browser/test/runTests.js",
		"browsertest:preprocess": "tsc ./src/test/browser/runTests.ts --outDir ./dist/browser/test --rootDir ./src/test/browser --target es6 --module commonjs",
		"bundle": "webpack --mode production --env esbuild",
		"bundle:node": "webpack --mode production --config-name extension:node --config-name webviews",
		"bundle:web": "webpack --mode production --config-name extension:webworker --config-name webviews",
		"clean": "rm -r dist/",
		"compile": "webpack --mode development --env esbuild",
		"compile:node": "webpack --mode development --config-name extension:node --config-name webviews",
		"compile:test": "tsc -p tsconfig.test.json",
		"compile:web": "webpack --mode development --config-name extension:webworker --config-name webviews",
		"hygiene": "node ./build/hygiene.js",
		"lint:browser": "eslint --fix --cache --cache-location .eslintcache.browser --config .eslintrc.browser.json --ignore-pattern src/env/node/**/* \"{src,webviews}/**/*.{ts,tsx}\"",
		"prepare": "husky install",
		"test:preprocess": "yarn run compile:test && yarn run test:preprocess-gql && yarn run test:preprocess-svg && yarn run test:preprocess-fixtures",
		"test:preprocess-fixtures": "node scripts/preprocess-fixtures --in src --out out",
		"test:preprocess-gql": "node scripts/preprocess-gql --in src/github/queries.gql --out out/src/github/queries.gql && node scripts/preprocess-gql --in src/github/queriesExtra.gql --out out/src/github/queriesExtra.gql && node scripts/preprocess-gql --in src/github/queriesShared.gql --out out/src/github/queriesShared.gql && node scripts/preprocess-gql --in src/github/queriesLimited.gql --out out/src/github/queriesLimited.gql",
		"test:preprocess-svg": "node scripts/preprocess-svg --in ../resources/ --out out/resources",
		"update-dts": "cd \"src/@types\" && npx vscode-dts main && npx vscode-dts dev",
		"watch:web": "webpack --watch --mode development --config-name extension:webworker --config-name webviews"
	},
	"l10n": "./dist/browser/extension",
	"contributes": {
		"chatParticipants": [
			{
				"description": "Chat participant for GitHub Pull Requests extension",
				"fullName": "GitHub Pull Requests",
				"id": "githubpr",
				"name": "githubpr",
				"when": "config.githubPullRequests.experimental.chat"
			}
		],
		"colors": [
			{
				"defaults": {
					"dark": "#ffffff48",
					"highContrast": "editor.foreground",
					"highContrastLight": "editor.foreground",
					"light": "#00000048"
				},
				"description": "The color used for the assignees and labels fields in a new issue editor.",
				"id": "issues.newIssueDecoration"
			},
			{
				"defaults": {
					"dark": "#3FB950",
					"highContrast": "editor.foreground",
					"highContrastLight": "editor.foreground",
					"light": "#3FB950"
				},
				"description": "The color used for indicating that an issue is open.",
				"id": "issues.open"
			},
			{
				"defaults": {
					"dark": "#cb2431",
					"highContrast": "editor.foreground",
					"highContrastLight": "editor.foreground",
					"light": "#cb2431"
				},
				"description": "The color used for indicating that an issue is closed.",
				"id": "issues.closed"
			},
			{
				"defaults": {
					"dark": "#8957e5",
					"highContrast": "editor.background",
					"highContrastLight": "editor.background",
					"light": "#8957e5"
				},
				"description": "The color used for indicating that a pull request is merged.",
				"id": "pullRequests.merged"
			},
			{
				"defaults": {
					"dark": "#6e7681",
					"highContrast": "editor.background",
					"highContrastLight": "editor.background",
					"light": "#6e7681"
				},
				"description": "The color used for indicating that a pull request is a draft.",
				"id": "pullRequests.draft"
			},
			{
				"defaults": {
					"dark": "issues.open",
					"highContrast": "editor.background",
					"highContrastLight": "editor.background",
					"light": "issues.open"
				},
				"description": "The color used for indicating that a pull request is open.",
				"id": "pullRequests.open"
			},
			{
				"defaults": {
					"dark": "issues.closed",
					"highContrast": "editor.background",
					"highContrastLight": "editor.background",
					"light": "issues.closed"
				},
				"description": "The color used for indicating that a pull request is closed.",
				"id": "pullRequests.closed"
			},
			{
				"defaults": {
					"dark": "notificationsInfoIcon.foreground",
					"highContrast": "editor.foreground",
					"highContrastLight": "editor.foreground",
					"light": "notificationsInfoIcon.foreground"
				},
				"description": "The color used for indicating a notification on a pull request",
				"id": "pullRequests.notification"
			}
		],
		"commands": [
			{
				"category": "%command.pull.request.category%",
				"command": "github.api.preloadPullRequest",
				"title": "Preload Pull Request"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.create",
				"icon": "$(git-pull-request-create)",
				"title": "%command.pr.create.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.pushAndCreate",
				"icon": "$(git-pull-request-create)",
				"title": "%command.pr.create.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.pick",
				"enablement": "viewItem =~ /hasHeadRef/",
				"icon": "$(arrow-right)",
				"title": "%command.pr.pick.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.openChanges",
				"icon": "$(diff-multiple)",
				"title": "%command.pr.openChanges.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.pickOnVscodeDev",
				"icon": "$(globe)",
				"title": "%command.pr.pickOnVscodeDev.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.exit",
				"title": "%command.pr.exit.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.dismissNotification",
				"title": "%command.pr.dismissNotification.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.merge",
				"title": "%command.pr.merge.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.readyForReview",
				"title": "%command.pr.readyForReview.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.close",
				"title": "%command.pr.close.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.openPullRequestOnGitHub",
				"icon": "$(globe)",
				"title": "%command.pr.openPullRequestOnGitHub.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.openAllDiffs",
				"title": "%command.pr.openAllDiffs.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.refreshPullRequest",
				"title": "%command.pr.refreshPullRequest.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.openFileOnGitHub",
				"title": "%command.pr.openFileOnGitHub.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.copyCommitHash",
				"title": "%command.pr.copyCommitHash.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.openOriginalFile",
				"title": "%command.pr.openOriginalFile.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.openModifiedFile",
				"title": "%command.pr.openModifiedFile.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.openDiffView",
				"icon": "$(compare-changes)",
				"title": "%command.pr.openDiffView.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.openDiffViewFromEditor",
				"icon": "$(git-pull-request)",
				"title": "%command.pr.openDiffViewFromEditor.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.openDescription",
				"icon": "$(note)",
				"title": "%command.pr.openDescription.title%",
				"when": "github:inReviewMode"
			},
			{
				"command": "pr.openDescriptionToTheSide",
				"icon": "$(split-horizontal)",
				"title": "%command.pr.openDescriptionToTheSide.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.refreshDescription",
				"title": "%command.pr.refreshDescription.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.focusDescriptionInput",
				"title": "%command.pr.focusDescriptionInput.title%"
			},
			{
				"command": "pr.showDiffSinceLastReview",
				"icon": "$(git-pull-request-new-changes)",
				"title": "%command.pr.showDiffSinceLastReview.title%"
			},
			{
				"command": "pr.showDiffAll",
				"icon": "$(git-pull-request-go-to-changes)",
				"title": "%command.pr.showDiffAll.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.checkoutByNumber",
				"icon": "$(symbol-numeric)",
				"title": "%command.pr.checkoutByNumber.title%"
			},
			{
				"command": "review.openFile",
				"icon": "$(go-to-file)",
				"title": "%command.review.openFile.title%"
			},
			{
				"command": "review.openLocalFile",
				"icon": "$(go-to-file)",
				"title": "%command.review.openLocalFile.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "review.suggestDiff",
				"title": "%command.review.suggestDiff.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.refreshList",
				"icon": "$(refresh)",
				"title": "%command.pr.refreshList.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.setFileListLayoutAsTree",
				"icon": "$(list-tree)",
				"title": "%command.pr.setFileListLayoutAsTree.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.setFileListLayoutAsFlat",
				"icon": "$(list-flat)",
				"title": "%command.pr.setFileListLayoutAsFlat.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.refreshChanges",
				"icon": "$(refresh)",
				"title": "%command.pr.refreshChanges.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.configurePRViewlet",
				"icon": "$(gear)",
				"title": "%command.pr.configurePRViewlet.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.deleteLocalBranch",
				"title": "%command.pr.deleteLocalBranch.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.signin",
				"title": "%command.pr.signin.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.signinNoEnterprise",
				"title": "%command.pr.signin.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.signinenterprise",
				"title": "%command.pr.signinenterprise.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.deleteLocalBranchesNRemotes",
				"title": "%command.pr.deleteLocalBranchesNRemotes.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.createComment",
				"enablement": "!commentIsEmpty",
				"title": "%command.pr.createComment.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.createSingleComment",
				"enablement": "!commentIsEmpty",
				"title": "%command.pr.createSingleComment.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.makeSuggestion",
				"title": "%command.pr.makeSuggestion.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.startReview",
				"enablement": "!commentIsEmpty",
				"title": "%command.pr.startReview.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.editComment",
				"enablement": "!(comment =~ /temporary/)",
				"icon": "$(edit)",
				"title": "%command.pr.editComment.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.cancelEditComment",
				"title": "%command.pr.cancelEditComment.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.saveComment",
				"enablement": "!commentIsEmpty",
				"title": "%command.pr.saveComment.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.deleteComment",
				"enablement": "!(comment =~ /temporary/)",
				"icon": "$(trash)",
				"title": "%command.pr.deleteComment.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.resolveReviewThread",
				"icon": "$(check)",
				"title": "%command.pr.resolveReviewThread.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.unresolveReviewThread",
				"title": "%command.pr.unresolveReviewThread.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.unresolveReviewThreadFromView",
				"icon": "$(sync)",
				"title": "%command.pr.unresolveReviewThread.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.diffOutdatedCommentWithHead",
				"icon": "$(git-compare)",
				"title": "%command.pr.diffOutdatedCommentWithHead.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.signinAndRefreshList",
				"title": "%command.pr.signinAndRefreshList.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.configureRemotes",
				"title": "%command.pr.configureRemotes.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.refreshActivePullRequest",
				"icon": "$(refresh)",
				"title": "%command.pr.refreshActivePullRequest.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.markFileAsViewed",
				"icon": "$(pass)",
				"title": "%command.pr.markFileAsViewed.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.unmarkFileAsViewed",
				"icon": "$(pass-filled)",
				"title": "%command.pr.unmarkFileAsViewed.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.openReview",
				"title": "%command.pr.openReview.title%"
			},
			{
				"category": "%command.comments.category%",
				"command": "pr.collapseAllComments",
				"icon": "$(collapse-all)",
				"title": "%command.pr.collapseAllComments.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.editQuery",
				"icon": "$(edit)",
				"title": "%command.pr.editQuery.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.openPullsWebsite",
				"icon": "$(globe)",
				"title": "%command.pr.openPullsWebsite.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.resetViewedFiles",
				"title": "%command.pr.resetViewedFiles.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.goToNextDiffInPr",
				"title": "%command.pr.goToNextDiffInPr.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.goToPreviousDiffInPr",
				"title": "%command.pr.goToPreviousDiffInPr.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.copyCommentLink",
				"enablement": "!(comment =~ /temporary/)",
				"icon": "$(copy)",
				"title": "%command.pr.copyCommentLink.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.applySuggestion",
				"icon": "$(replace)",
				"title": "%command.pr.applySuggestion.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.applySuggestionWithCopilot",
				"icon": "$(sparkle)",
				"title": "%command.pr.applySuggestionWithCopilot.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.addAssigneesToNewPr",
				"icon": "$(account)",
				"title": "%command.pr.addAssigneesToNewPr.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.addReviewersToNewPr",
				"icon": "$(feedback)",
				"title": "%command.pr.addReviewersToNewPr.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.addLabelsToNewPr",
				"icon": "$(tag)",
				"title": "%command.pr.addLabelsToNewPr.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.addMilestoneToNewPr",
				"icon": "$(milestone)",
				"title": "%command.pr.addMilestoneToNewPr.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.addProjectsToNewPr",
				"icon": "$(github-project)",
				"title": "%command.pr.addProjectsToNewPr.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.preReview",
				"enablement": "!pr:preReviewing && !pr:creating",
				"icon": "$(comment)",
				"title": "%command.pr.preReview.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.addFileComment",
				"icon": "$(comment)",
				"title": "%command.pr.addFileComment.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.checkoutFromReadonlyFile",
				"title": "%command.pr.pick.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.resolveConflict",
				"title": "%command.pr.resolveConflict.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.acceptMerge",
				"title": "%command.pr.acceptMerge.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.closeRelatedEditors",
				"title": "%command.pr.closeRelatedEditors.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.toggleEditorCommentingOn",
				"icon": "$(eye-closed)",
				"title": "%command.pr.toggleEditorCommentingOn.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.toggleEditorCommentingOff",
				"icon": "$(eye)",
				"title": "%command.pr.toggleEditorCommentingOff.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "review.diffWithPrHead",
				"title": "%command.review.diffWithPrHead.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "review.diffLocalWithPrHead",
				"title": "%command.review.diffLocalWithPrHead.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "review.approve",
				"title": "%command.review.approve.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "review.comment",
				"title": "%command.review.comment.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "review.requestChanges",
				"title": "%command.review.requestChanges.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "review.approveOnDotCom",
				"title": "%command.review.approveOnDotCom.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "review.requestChangesOnDotCom",
				"title": "%command.review.requestChangesOnDotCom.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "review.approveDescription",
				"title": "%command.review.approve.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "review.commentDescription",
				"title": "%command.review.comment.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "review.requestChangesDescription",
				"title": "%command.review.requestChanges.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "review.approveOnDotComDescription",
				"title": "%command.review.approveOnDotCom.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "review.requestChangesOnDotComDescription",
				"title": "%command.review.requestChangesOnDotCom.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "review.createSuggestionsFromChanges",
				"icon": "$(comment)",
				"title": "%command.review.createSuggestionsFromChanges.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "review.createSuggestionFromChange",
				"icon": "$(comment)",
				"title": "%command.review.createSuggestionFromChange.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "review.copyPrLink",
				"title": "%command.review.copyPrLink.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.createPrMenuCreate",
				"title": "%command.pr.createPrMenuCreate.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.createPrMenuDraft",
				"title": "%command.pr.createPrMenuDraft.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.createPrMenuMergeWhenReady",
				"title": "%command.pr.createPrMenuMergeWhenReady.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.createPrMenuMerge",
				"title": "%command.pr.createPrMenuMerge.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.createPrMenuSquash",
				"title": "%command.pr.createPrMenuSquash.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.createPrMenuRebase",
				"title": "%command.pr.createPrMenuRebase.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.createIssueFromSelection",
				"title": "%command.issue.createIssueFromSelection.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.createIssueFromClipboard",
				"title": "%command.issue.createIssueFromClipboard.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "pr.copyVscodeDevPrLink",
				"title": "%command.pr.copyVscodeDevPrLink.title%"
			},
			{
				"category": "%command.pull.request.category%",
				"command": "pr.refreshComments",
				"icon": "$(refresh)",
				"title": "%command.pr.refreshComments.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.copyGithubDevLinkWithoutRange",
				"enablement": "!isInEmbeddedEditor",
				"title": "%command.issue.copyGithubDevLink.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.copyGithubDevLinkFile",
				"enablement": "!isInEmbeddedEditor",
				"title": "%command.issue.copyGithubDevLink.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.copyGithubDevLink",
				"enablement": "!isInEmbeddedEditor",
				"title": "%command.issue.copyGithubDevLink.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.copyGithubPermalink",
				"enablement": "!isInEmbeddedEditor",
				"title": "%command.issue.copyGithubPermalink.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.copyGithubHeadLink",
				"enablement": "!isInEmbeddedEditor",
				"title": "%command.issue.copyGithubHeadLink.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.copyGithubPermalinkWithoutRange",
				"enablement": "!isInEmbeddedEditor",
				"title": "%command.issue.copyGithubPermalink.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.copyGithubHeadLinkWithoutRange",
				"enablement": "!isInEmbeddedEditor",
				"title": "%command.issue.copyGithubHeadLink.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.copyMarkdownGithubPermalink",
				"enablement": "!isInEmbeddedEditor",
				"title": "%command.issue.copyMarkdownGithubPermalink.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.copyMarkdownGithubPermalinkWithoutRange",
				"enablement": "!isInEmbeddedEditor",
				"title": "%command.issue.copyMarkdownGithubPermalink.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.openGithubPermalink",
				"title": "%command.issue.openGithubPermalink.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.openIssue",
				"icon": "$(globe)",
				"title": "%command.issue.openIssue.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.copyIssueNumber",
				"title": "%command.issue.copyIssueNumber.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.copyIssueUrl",
				"title": "%command.issue.copyIssueUrl.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.refresh",
				"icon": "$(refresh)",
				"title": "%command.issue.refresh.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.suggestRefresh",
				"title": "%command.issue.suggestRefresh.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.startWorking",
				"icon": "$(arrow-right)",
				"title": "%command.issue.startWorking.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.startWorkingBranchDescriptiveTitle",
				"icon": "$(arrow-right)",
				"title": "%command.issue.startWorkingBranchDescriptiveTitle.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.continueWorking",
				"icon": "$(arrow-right)",
				"title": "%command.issue.continueWorking.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.startWorkingBranchPrompt",
				"title": "%command.issue.startWorkingBranchPrompt.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.stopWorking",
				"icon": "$(primitive-square)",
				"title": "%command.issue.stopWorking.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.stopWorkingBranchDescriptiveTitle",
				"icon": "$(primitive-square)",
				"title": "%command.issue.stopWorkingBranchDescriptiveTitle.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.statusBar",
				"title": "%command.issue.statusBar.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.getCurrent",
				"title": "%command.issue.getCurrent.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.editQuery",
				"icon": "$(edit)",
				"title": "%command.issue.editQuery.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.createIssue",
				"icon": "$(plus)",
				"title": "%command.issue.createIssue.title%"
			},
			{
				"command": "issue.createIssueFromFile",
				"enablement": "!issues.creatingFromFile",
				"icon": "$(check)",
				"title": "%command.issue.createIssueFromFile.title%"
			},
			{
				"command": "issue.issueCompletion",
				"title": "%command.issue.issueCompletion.title%"
			},
			{
				"command": "issue.userCompletion",
				"title": "%command.issue.userCompletion.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.signinAndRefreshList",
				"title": "%command.issue.signinAndRefreshList.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.goToLinkedCode",
				"title": "%command.issue.goToLinkedCode.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issues.openIssuesWebsite",
				"icon": "$(globe)",
				"title": "%command.issues.openIssuesWebsite.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.chatSummarizeIssue",
				"icon": "$(copilot)",
				"title": "%command.issue.chatSummarizeIssue.title%"
			},
			{
				"category": "%command.issues.category%",
				"command": "issue.chatSuggestFix",
				"icon": "$(sparkle)",
				"title": "%command.issue.chatSuggestFix.title%"
			},
			{
				"category": "%command.notifications.category%",
				"command": "notifications.refresh",
				"icon": "$(refresh)",
				"title": "%command.notifications.refresh.title%"
			},
			{
				"category": "%command.notifications.category%",
				"command": "notifications.loadMore",
				"title": "%command.notifications.loadMore.title%"
			},
			{
				"category": "%command.notifications.category%",
				"command": "notifications.sortByTimestamp",
				"title": "%command.notifications.sortByTimestamp.title%"
			},
			{
				"category": "%command.notifications.category%",
				"command": "notifications.sortByPriority",
				"title": "%command.notifications.sortByPriority.title%"
			},
			{
				"category": "%command.notifications.category%",
				"command": "notification.openOnGitHub",
				"icon": "$(globe)",
				"title": "%command.notifications.openOnGitHub.title%"
			},
			{
				"category": "%command.notifications.category%",
				"command": "notification.chatSummarizeNotification",
				"icon": "$(copilot)",
				"title": "%command.notification.chatSummarizeNotification.title%"
			},
			{
				"category": "%command.notifications.category%",
				"command": "notification.markAsRead",
				"icon": "$(mail-read)",
				"title": "%command.notifications.markAsRead.title%"
			}
		],
		"configuration": {
			"properties": {
				"githubIssues.alwaysPromptForNewIssueRepo": {
					"default": false,
					"description": "%githubIssues.alwaysPromptForNewIssueRepo.description%",
					"type": "boolean"
				},
				"githubIssues.createInsertFormat": {
					"default": "number",
					"description": "%githubIssues.createInsertFormat.description%",
					"enum": [
						"number",
						"url"
					],
					"type": "string"
				},
				"githubIssues.createIssueTriggers": {
					"default": [
						"TODO",
						"todo",
						"BUG",
						"FIXME",
						"ISSUE",
						"HACK"
					],
					"description": "%githubIssues.createIssueTriggers.description%",
					"items": {
						"description": "%githubIssues.createIssueTriggers.items%",
						"type": "string"
					},
					"type": "array"
				},
				"githubIssues.ignoreCompletionTrigger": {
					"default": [
						"coffeescript",
						"diff",
						"dockerfile",
						"dockercompose",
						"ignore",
						"ini",
						"julia",
						"makefile",
						"perl",
						"powershell",
						"python",
						"r",
						"ruby",
						"shellscript",
						"yaml"
					],
					"description": "%githubIssues.ignoreCompletionTrigger.description%",
					"items": {
						"description": "%githubIssues.ignoreCompletionTrigger.items%",
						"type": "string"
					},
					"type": "array"
				},
				"githubIssues.ignoreMilestones": {
					"default": [],
					"description": "%githubIssues.ignoreMilestones.description%",
					"type": "array"
				},
				"githubIssues.ignoreUserCompletionTrigger": {
					"default": [],
					"description": "%githubIssues.ignoreUserCompletionTrigger.description%",
					"items": {
						"description": "%githubIssues.ignoreUserCompletionTrigger.items%",
						"type": "string"
					},
					"type": "array"
				},
				"githubIssues.issueBranchTitle": {
					"default": "${user}/issue${issueNumber}",
					"markdownDescription": "%githubIssues.issueBranchTitle.markdownDescription%",
					"type": "string"
				},
				"githubIssues.issueCompletionFormatScm": {
					"default": "${issueTitle} ${issueNumberLabel}",
					"markdownDescription": "%githubIssues.issueCompletionFormatScm.markdownDescription%",
					"type": "string"
				},
				"githubIssues.issueCompletions.enabled": {
					"default": true,
					"description": "%githubIssues.issueCompletions.enabled.description%",
					"type": "boolean"
				},
				"githubIssues.queries": {
					"default": [
						{
							"groupBy": [
								"milestone"
							],
							"label": "%githubIssues.queries.default.myIssues%",
							"query": "is:open assignee:${user} repo:${owner}/${repository}"
						},
						{
							"label": "%githubIssues.queries.default.createdIssues%",
							"query": "author:${user} state:open repo:${owner}/${repository} sort:created-desc"
						},
						{
							"label": "%githubIssues.queries.default.recentIssues%",
							"query": "state:open repo:${owner}/${repository} sort:updated-desc"
						}
					],
					"items": {
						"properties": {
							"groupBy": {
								"items": {
									"enum": [
										"repository",
										"milestone"
									],
									"enumDescriptions": [
										"%githubIssues.queries.groupBy.milestone%",
										"%githubIssues.queries.groupBy.repository%"
									],
									"type": "string"
								},
								"markdownDescription": "%githubIssues.queries.groupBy%",
								"type": "array"
							},
							"label": {
								"description": "%githubIssues.queries.label%",
								"type": "string"
							},
							"query": {
								"markdownDescription": "%githubIssues.queries.query%",
								"type": "string"
							}
						},
						"type": "object"
					},
					"markdownDescription": "%githubIssues.queries.markdownDescription%",
					"scope": "resource",
					"type": "array"
				},
				"githubIssues.useBranchForIssues": {
					"default": "on",
					"enum": [
						"on",
						"off",
						"prompt"
					],
					"enumDescriptions": [
						"%githubIssues.useBranchForIssues.on%",
						"%githubIssues.useBranchForIssues.off%",
						"%githubIssues.useBranchForIssues.prompt%"
					],
					"markdownDescription": "%githubIssues.useBranchForIssues.markdownDescription%",
					"type": "string"
				},
				"githubIssues.userCompletions.enabled": {
					"default": true,
					"description": "%githubIssues.userCompletions.enabled.description%",
					"type": "boolean"
				},
				"githubIssues.workingIssueFormatScm": {
					"default": "${issueTitle} \nFixes ${issueNumberLabel}",
					"editPresentation": "multilineText",
					"markdownDescription": "%githubIssues.workingIssueFormatScm.markdownDescription%",
					"type": "string"
				},
				"githubPullRequests.allowFetch": {
					"default": true,
					"description": "%githubPullRequests.allowFetch.description%",
					"type": "boolean"
				},
				"githubPullRequests.assignCreated": {
					"description": "%githubPullRequests.assignCreated.description%",
					"type": "string"
				},
				"githubPullRequests.commentExpandState": {
					"default": "expandUnresolved",
					"description": "%githubPullRequests.commentExpandState.description%",
					"enum": [
						"expandUnresolved",
						"collapseAll"
					],
					"enumDescriptions": [
						"%githubPullRequests.commentExpandState.expandUnresolved%",
						"%githubPullRequests.commentExpandState.collapseAll%"
					],
					"type": "string"
				},
				"githubPullRequests.createDefaultBaseBranch": {
					"default": "auto",
					"enum": [
						"repositoryDefault",
						"createdFromBranch",
						"auto"
					],
					"markdownDescription": "%githubPullRequests.createDefaultBaseBranch.description%",
					"markdownEnumDescriptions": [
						"%githubPullRequests.createDefaultBaseBranch.repositoryDefault%",
						"%githubPullRequests.createDefaultBaseBranch.createdFromBranch%",
						"%githubPullRequests.createDefaultBaseBranch.auto%"
					],
					"type": "string"
				},
				"githubPullRequests.createDraft": {
					"default": false,
					"deprecationMessage": "Use the setting 'githubPullRequests.defaultCreateOption' instead.",
					"description": "%githubPullRequests.createDraft%",
					"type": "boolean"
				},
				"githubPullRequests.createOnPublishBranch": {
					"default": "ask",
					"description": "%githubPullRequests.createOnPublishBranch.description%",
					"enum": [
						"never",
						"ask"
					],
					"enumDescriptions": [
						"%githubPullRequests.createOnPublishBranch.never%",
						"%githubPullRequests.createOnPublishBranch.ask%"
					],
					"type": "string"
				},
				"githubPullRequests.defaultCommentType": {
					"default": "single",
					"description": "%githubPullRequests.defaultCommentType.description%",
					"enum": [
						"single",
						"review"
					],
					"enumDescriptions": [
						"%githubPullRequests.defaultCommentType.single%",
						"%githubPullRequests.defaultCommentType.review%"
					],
					"type": "string"
				},
				"githubPullRequests.defaultCreateOption": {
					"default": "lastUsed",
					"description": "%githubPullRequests.defaultCreateOption.description%",
					"enum": [
						"lastUsed",
						"create",
						"createDraft",
						"createAutoMerge"
					],
					"markdownEnumDescriptions": [
						"%githubPullRequests.defaultCreateOption.lastUsed%",
						"%githubPullRequests.defaultCreateOption.create%",
						"%githubPullRequests.defaultCreateOption.createDraft%",
						"%githubPullRequests.defaultCreateOption.createAutoMerge%"
					],
					"type": "string"
				},
				"githubPullRequests.defaultDeletionMethod.selectLocalBranch": {
					"default": true,
					"description": "%githubPullRequests.defaultDeletionMethod.selectLocalBranch.description%",
					"type": "boolean"
				},
				"githubPullRequests.defaultDeletionMethod.selectRemote": {
					"default": true,
					"description": "%githubPullRequests.defaultDeletionMethod.selectRemote.description%",
					"type": "boolean"
				},
				"githubPullRequests.defaultMergeMethod": {
					"default": "merge",
					"description": "%githubPullRequests.defaultMergeMethod.description%",
					"enum": [
						"merge",
						"squash",
						"rebase"
					],
					"type": "string"
				},
				"githubPullRequests.experimental.chat": {
					"default": false,
					"markdownDescription": "%githubPullRequests.experimental.chat.description%",
					"type": "boolean"
				},
				"githubPullRequests.experimental.notificationsView": {
					"default": false,
					"markdownDescription": "%githubPullRequests.experimental.notificationsView.description%",
					"type": "boolean"
				},
				"githubPullRequests.experimental.useQuickChat": {
					"default": false,
					"markdownDescription": "%githubPullRequests.experimental.useQuickChat.description%",
					"type": "boolean"
				},
				"githubPullRequests.fileListLayout": {
					"default": "tree",
					"description": "%githubPullRequests.fileListLayout.description%",
					"enum": [
						"flat",
						"tree"
					],
					"type": "string"
				},
				"githubPullRequests.focusedMode": {
					"default": "multiDiff",
					"description": "%githubPullRequests.focusedMode.description%",
					"enum": [
						"firstDiff",
						"overview",
						"multiDiff",
						false
					],
					"properties": {
						"oneOf": [
							{
								"type": "boolean"
							},
							{
								"type": "string"
							}
						]
					}
				},
				"githubPullRequests.ignoredPullRequestBranches": {
					"default": [],
					"description": "%githubPullRequests.ignoredPullRequestBranches.description%",
					"items": {
						"description": "%githubPullRequests.ignoredPullRequestBranches.items%",
						"type": "string"
					},
					"type": "array"
				},
				"githubPullRequests.includeRemotes": {
					"default": "default",
					"deprecationMessage": "The setting `githubPullRequests.includeRemotes` has been deprecated. Use `githubPullRequests.remotes` to configure what remotes are shown.",
					"description": "By default we only support remotes created by users. If you want to see pull requests from remotes this extension created for pull requests, change this setting to 'all'.",
					"enum": [
						"default",
						"all"
					],
					"type": "string"
				},
				"githubPullRequests.labelCreated": {
					"default": [],
					"description": "%githubPullRequests.labelCreated.description%",
					"items": {
						"description": "%githubPullRequests.labelCreated.label.description%",
						"type": "string"
					},
					"type": "array"
				},
				"githubPullRequests.logLevel": {
					"default": "info",
					"description": "%githubPullRequests.logLevel.description%",
					"enum": [
						"info",
						"debug",
						"off"
					],
					"markdownDeprecationMessage": "%githubPullRequests.logLevel.markdownDeprecationMessage%",
					"type": "string"
				},
				"githubPullRequests.neverIgnoreDefaultBranch": {
					"description": "%githubPullRequests.neverIgnoreDefaultBranch.description%",
					"type": "boolean"
				},
				"githubPullRequests.notifications": {
					"default": "off",
					"description": "%githubPullRequests.notifications.description%",
					"enum": [
						"pullRequests",
						"off"
					],
					"type": "string"
				},
				"githubPullRequests.overrideDefaultBranch": {
					"description": "%githubPullRequests.overrideDefaultBranch.description%",
					"type": "string"
				},
				"githubPullRequests.postCreate": {
					"default": "openOverview",
					"description": "%githubPullRequests.postCreate.description%",
					"enum": [
						"none",
						"openOverview",
						"checkoutDefaultBranch",
						"checkoutDefaultBranchAndShow",
						"checkoutDefaultBranchAndCopy"
					],
					"enumDescriptions": [
						"%githubPullRequests.postCreate.none%",
						"%githubPullRequests.postCreate.openOverview%",
						"%githubPullRequests.postCreate.checkoutDefaultBranch%",
						"%githubPullRequests.postCreate.checkoutDefaultBranchAndShow%",
						"%githubPullRequests.postCreate.checkoutDefaultBranchAndCopy%"
					],
					"type": "string"
				},
				"githubPullRequests.pullBranch": {
					"default": "prompt",
					"description": "%githubPullRequests.pullBranch.description%",
					"enum": [
						"prompt",
						"never",
						"always"
					],
					"markdownEnumDescriptions": [
						"%githubPullRequests.pullBranch.prompt%",
						"%githubPullRequests.pullBranch.never%",
						"%githubPullRequests.pullBranch.always%"
					],
					"type": "string"
				},
				"githubPullRequests.pullPullRequestBranchBeforeCheckout": {
					"default": "pull",
					"description": "%githubPullRequests.pullPullRequestBranchBeforeCheckout.description%",
					"enum": [
						"never",
						"pull",
						"pullAndMergeBase",
						"pullAndUpdateBase"
					],
					"enumDescriptions": [
						"%githubPullRequests.pullPullRequestBranchBeforeCheckout.never%",
						"%githubPullRequests.pullPullRequestBranchBeforeCheckout.pull%",
						"%githubPullRequests.pullPullRequestBranchBeforeCheckout.pullAndMergeBase%",
						"%githubPullRequests.pullPullRequestBranchBeforeCheckout.pullAndUpdateBase%"
					],
					"type": "string"
				},
				"githubPullRequests.pullRequestDescription": {
					"default": "template",
					"description": "%githubPullRequests.pullRequestDescription.description%",
					"enum": [
						"template",
						"commit",
						"none",
						"Copilot"
					],
					"enumDescriptions": [
						"%githubPullRequests.pullRequestDescription.template%",
						"%githubPullRequests.pullRequestDescription.commit%",
						"%githubPullRequests.pullRequestDescription.none%",
						"%githubPullRequests.pullRequestDescription.copilot%"
					],
					"type": "string"
				},
				"githubPullRequests.pullRequestTitle": {
					"default": "ask",
					"deprecationMessage": "The pull request title now uses the same defaults as GitHub, and can be edited before create.",
					"description": "The title used when creating pull requests.",
					"enum": [
						"commit",
						"branch",
						"custom",
						"ask"
					],
					"enumDescriptions": [
						"Use the latest commit message",
						"Use the branch name",
						"Specify a custom title",
						"Ask which of the above methods to use"
					],
					"type": "string"
				},
				"githubPullRequests.pushBranch": {
					"default": "prompt",
					"description": "%githubPullRequests.pushBranch.description%",
					"enum": [
						"prompt",
						"always"
					],
					"enumDescriptions": [
						"%githubPullRequests.pushBranch.prompt%",
						"%githubPullRequests.pushBranch.always%"
					],
					"type": "string"
				},
				"githubPullRequests.queries": {
					"default": [
						{
							"label": "%githubPullRequests.queries.waitingForMyReview%",
							"query": "is:open review-requested:${user}"
						},
						{
							"label": "%githubPullRequests.queries.assignedToMe%",
							"query": "is:open assignee:${user}"
						},
						{
							"label": "%githubPullRequests.queries.createdByMe%",
							"query": "is:open author:${user}"
						}
					],
					"items": {
						"properties": {
							"label": {
								"description": "%githubPullRequests.queries.label.description%",
								"type": "string"
							},
							"query": {
								"description": "%githubPullRequests.queries.query.description%",
								"type": "string"
							}
						},
						"type": "object"
					},
					"markdownDescription": "%githubPullRequests.queries.markdownDescription%",
					"scope": "resource",
					"type": "array"
				},
				"githubPullRequests.quickDiff": {
					"default": false,
					"description": "Enables quick diff in the editor gutter for checked-out pull requests. Requires a reload to take effect",
					"type": "boolean"
				},
				"githubPullRequests.remotes": {
					"default": [
						"origin",
						"upstream"
					],
					"items": {
						"type": "string"
					},
					"markdownDescription": "%githubPullRequests.remotes.markdownDescription%",
					"type": "array"
				},
				"githubPullRequests.setAutoMerge": {
					"default": false,
					"deprecationMessage": "Use the setting 'githubPullRequests.defaultCreateOption' instead.",
					"description": "%githubPullRequests.setAutoMerge.description%",
					"type": "boolean"
				},
				"githubPullRequests.showInSCM": {
					"default": false,
					"deprecationMessage": "This setting is deprecated. Views can now be dragged to any location.",
					"description": "When true, show GitHub Pull Requests within the SCM viewlet. Otherwise show a separate view container for them.",
					"type": "boolean"
				},
				"githubPullRequests.showPullRequestNumberInTree": {
					"default": false,
					"description": "%githubPullRequests.showPullRequestNumberInTree.description%"
				}
			},
			"title": "GitHub Pull Requests",
			"type": "object"
		},
		"keybindings": [
			{
				"command": "issue.suggestRefresh",
				"key": "ctrl+shift+space",
				"when": "suggestWidgetVisible"
			},
			{
				"command": "issue.createIssueFromFile",
				"key": "ctrl+s",
				"mac": "cmd+s",
				"when": "resourceScheme == newIssue && config.files.autoSave != off"
			},
			{
				"command": "issue.createIssueFromFile",
				"key": "ctrl+enter",
				"mac": "cmd+enter",
				"when": "resourceScheme == newIssue"
			},
			{
				"command": "pr.makeSuggestion",
				"key": "ctrl+k m",
				"mac": "cmd+k m",
				"when": "commentEditorFocused"
			}
		],
		"languageModelTools": [
			{
				"canBeReferencedInPrompt": true,
				"displayName": "%languageModelTools.github-pull-request_issue_fetch.displayName%",
				"icon": "$(info)",
				"inputSchema": {
					"properties": {
						"issueNumber": {
							"description": "The number of the issue/PR to get.",
							"type": "number"
						},
						"repo": {
							"description": "The repository to get the issue/PR from.",
							"properties": {
								"name": {
									"description": "The name of the repository to get the issue/PR from.",
									"type": "string"
								},
								"owner": {
									"description": "The owner of the repository to get the issue/PR from.",
									"type": "string"
								}
							},
							"required": [
								"owner",
								"name"
							],
							"type": "object"
						}
					},
					"required": [
						"issueNumber"
					],
					"type": "object"
				},
				"modelDescription": "Get a GitHub issue/PR's details as a JSON object.",
				"name": "github-pull-request_issue_fetch",
				"tags": [
					"github",
					"issues",
					"prs"
				],
				"toolReferenceName": "issue_fetch",
				"when": "config.githubPullRequests.experimental.chat"
			},
			{
				"canBeReferencedInPrompt": true,
				"displayName": "%languageModelTools.github-pull-request_notification_fetch.displayName%",
				"icon": "$(info)",
				"inputSchema": {
					"properties": {
						"thread_id": {
							"description": "The notification thread id.",
							"type": "string"
						}
					},
					"required": [
						"thread_id"
					],
					"type": "object"
				},
				"modelDescription": "Get a GitHub notification's details as a JSON object.",
				"name": "github-pull-request_notification_fetch",
				"tags": [
					"github",
					"notification"
				],
				"toolReferenceName": "notification_fetch",
				"when": "config.githubPullRequests.experimental.chat"
			},
			{
				"canBeReferencedInPrompt": true,
				"displayName": "%languageModelTools.github-pull-request_issue_summarize.displayName%",
				"icon": "$(info)",
				"inputSchema": {
					"properties": {
						"body": {
							"description": "The body of the issue/PR",
							"type": "string"
						},
						"comments": {
							"description": "The array of associated string comments",
							"items": {
								"properties": {
									"author": {
										"description": "The author of the comment",
										"type": "string"
									},
									"body": {
										"description": "The comment body",
										"type": "string"
									}
								},
								"type": "object"
							},
							"type": "array"
						},
						"fileChanges": {
							"description": "For a PR, the array of associated file changes",
							"items": {
								"properties": {
									"fileName": {
										"description": "The name of the file of the change",
										"type": "string"
									},
									"patch": {
										"description": "The patch of the change",
										"type": "string"
									}
								},
								"type": "object"
							},
							"type": "array"
						},
						"owner": {
							"description": "The owner of the repo in which the issue/PR is located",
							"type": "string"
						},
						"repo": {
							"description": "The repo in which the issue/PR is located",
							"type": "string"
						},
						"title": {
							"description": "The title of the issue/PR",
							"type": "string"
						}
					},
					"required": [
						"title",
						"body",
						"comments",
						"owner",
						"repo"
					],
					"type": "object"
				},
				"modelDescription": "Summarizes a GitHub issue or pull request. A summary is a great way to describe an issue or pull request.",
				"name": "github-pull-request_issue_summarize",
				"tags": [
					"github",
					"issues",
					"prs"
				],
				"toolReferenceName": "issue_summarize",
				"when": "config.githubPullRequests.experimental.chat"
			},
			{
				"canBeReferencedInPrompt": true,
				"displayName": "%languageModelTools.github-pull-request_notification_summarize.displayName%",
				"icon": "$(info)",
				"inputSchema": {
					"properties": {
						"body": {
							"description": "The body of the notification issue/PR",
							"type": "string"
						},
						"comments": {
							"description": "The array of unread comments under the issue/PR of the notification",
							"items": {
								"properties": {
									"author": {
										"description": "The author of the comment",
										"type": "string"
									},
									"body": {
										"description": "The comment body",
										"type": "string"
									}
								},
								"type": "object"
							},
							"type": "array"
						},
						"fileChanges": {
							"description": "For a notification about a PR, the array of associated file changes",
							"items": {
								"properties": {
									"fileName": {
										"description": "The name of the file of the change",
										"type": "string"
									},
									"patch": {
										"description": "The patch of the change",
										"type": "string"
									}
								},
								"required": [
									"fileName",
									"patch"
								],
								"type": "object"
							},
							"type": "array"
						},
						"itemNumber": {
							"description": "The number of the issue/PR in the notification",
							"type": "string"
						},
						"itemType": {
							"description": "The type of the item in the notification - whether it is an issue or a PR",
							"type": "string"
						},
						"lastReadAt": {
							"description": "The last read time of the notification.",
							"type": "string"
						},
						"lastUpdatedAt": {
							"description": "The last updated time of the notification.",
							"type": "string"
						},
						"notificationKey": {
							"description": "The key of the notification",
							"type": "string"
						},
						"owner": {
							"description": "The owner of the repo in which the issue/PR is located",
							"type": "string"
						},
						"repo": {
							"description": "The repo in which the issue/PR is located",
							"type": "string"
						},
						"threadId": {
							"description": "The thread id of the notification",
							"type": "number"
						},
						"title": {
							"description": "The title of the notification issue/PR",
							"type": "string"
						},
						"unread": {
							"description": "Whether the notification is unread.",
							"type": "boolean"
						}
					},
					"required": [
						"title",
						"comments",
						"lastUpdatedAt",
						"unread",
						"threadId",
						"notificationKey",
						"owner",
						"repo",
						"itemNumber",
						"itemType"
					],
					"type": "object"
				},
				"modelDescription": "Summarizes a GitHub notification. A summary is a great way to describe a notification.",
				"name": "github-pull-request_notification_summarize",
				"tags": [
					"github",
					"notification"
				],
				"toolReferenceName": "notification_summarize",
				"when": "config.githubPullRequests.experimental.chat"
			},
			{
				"canBeReferencedInPrompt": true,
				"displayName": "%languageModelTools.github-pull-request_suggest-fix.displayName%",
				"icon": "$(info)",
				"inputSchema": {
					"properties": {
						"issueNumber": {
							"description": "The number of the issue to get.",
							"type": "number"
						},
						"repo": {
							"description": "The repository to get the issue from.",
							"properties": {
								"name": {
									"description": "The name of the repository to get the issue from.",
									"type": "string"
								},
								"owner": {
									"description": "The owner of the repository to get the issue from.",
									"type": "string"
								}
							},
							"required": [
								"owner",
								"name"
							],
							"type": "object"
						}
					},
					"required": [
						"issueNumber",
						"repo"
					],
					"type": "object"
				},
				"modelDescription": "Summarize and suggest a fix for a GitHub issue.",
				"name": "github-pull-request_suggest-fix",
				"tags": [
					"github",
					"issues"
				],
				"toolReferenceName": "suggest-fix",
				"when": "config.githubPullRequests.experimental.chat"
			},
			{
				"canBeReferencedInPrompt": true,
				"displayName": "%languageModelTools.github-pull-request_formSearchQuery.displayName%",
				"icon": "$(search)",
				"inputSchema": {
					"properties": {
						"naturalLanguageString": {
							"description": "A plain text description of what the search should be.",
							"type": "string"
						},
						"repo": {
							"description": "The repository to get the issue from.",
							"properties": {
								"name": {
									"description": "The name of the repository to get the issue from.",
									"type": "string"
								},
								"owner": {
									"description": "The owner of the repository to get the issue from.",
									"type": "string"
								}
							},
							"required": [
								"owner",
								"name"
							],
							"type": "object"
						}
					},
					"required": [
						"naturalLanguageString"
					],
					"type": "object"
				},
				"modelDescription": "Converts natural language to a GitHub search query. Should ALWAYS be called before doing a search.",
				"name": "github-pull-request_formSearchQuery",
				"tags": [
					"github",
					"issues",
					"search",
					"query",
					"natural language"
				],
				"toolReferenceName": "searchSyntax",
				"when": "config.githubPullRequests.experimental.chat"
			},
			{
				"canBeReferencedInPrompt": true,
				"displayName": "%languageModelTools.github-pull-request_doSearch.displayName%",
				"icon": "$(search)",
				"inputSchema": {
					"properties": {
						"query": {
							"description": "A well formed GitHub search query using proper GitHub search syntax.",
							"type": "string"
						},
						"repo": {
							"description": "The repository to get the issue from.",
							"properties": {
								"name": {
									"description": "The name of the repository to get the issue from.",
									"type": "string"
								},
								"owner": {
									"description": "The owner of the repository to get the issue from.",
									"type": "string"
								}
							},
							"required": [
								"owner",
								"name"
							],
							"type": "object"
						}
					},
					"required": [
						"query",
						"repo"
					],
					"type": "object"
				},
				"modelDescription": "Execute a GitHub search given a well formed GitHub search query. Call github-pull-request_formSearchQuery first to get good search syntax and pass the exact result in as the 'query'.",
				"name": "github-pull-request_doSearch",
				"tags": [
					"github",
					"issues",
					"search"
				],
				"toolReferenceName": "doSearch",
				"when": "config.githubPullRequests.experimental.chat"
			},
			{
				"canBeReferencedInPrompt": false,
				"displayName": "%languageModelTools.github-pull-request_renderIssues.displayName%",
				"icon": "$(paintcan)",
				"inputSchema": {
					"properties": {
						"arrayOfIssues": {
							"description": "An array of GitHub Issues.",
							"items": {
								"properties": {
									"assignees": {
										"description": "The assignees of the issue.",
										"items": {
											"properties": {
												"login": {
													"description": "The login of the assignee.",
													"type": "string"
												},
												"url": {
													"description": "The URL of the assignee's profile.",
													"type": "string"
												}
											},
											"type": "object"
										},
										"type": "array"
									},
									"author": {
										"description": "The author of the issue.",
										"properties": {
											"login": {
												"description": "The login of the author.",
												"type": "string"
											},
											"url": {
												"description": "The URL of the author's profile.",
												"type": "string"
											}
										},
										"type": "object"
									},
									"closedAt": {
										"description": "The closing date of the issue.",
										"type": "string"
									},
									"commentsCount": {
										"description": "The number of comments on the issue.",
										"type": "number"
									},
									"createdAt": {
										"description": "The creation date of the issue.",
										"type": "string"
									},
									"labels": {
										"description": "The labels associated with the issue.",
										"items": {
											"properties": {
												"color": {
													"description": "The color of the label.",
													"type": "string"
												},
												"name": {
													"description": "The name of the label.",
													"type": "string"
												}
											},
											"type": "object"
										},
										"type": "array"
									},
									"number": {
										"description": "The number of the issue.",
										"type": "number"
									},
									"state": {
										"description": "The state of the issue (open/closed).",
										"type": "string"
									},
									"title": {
										"description": "The title of the issue.",
										"type": "string"
									},
									"updatedAt": {
										"description": "The last update date of the issue.",
										"type": "string"
									},
									"url": {
										"description": "The URL of the issue.",
										"type": "string"
									}
								},
								"type": "object"
							},
							"required": [
								"title",
								"number",
								"url",
								"state",
								"createdAt",
								"author",
								"commentCount",
								"reactionCount"
							],
							"type": "array"
						},
						"totalIssues": {
							"description": "The total number of issues in the search.",
							"type": "number"
						}
					},
					"required": [
						"arrayOfIssues",
						"totalIssues"
					],
					"type": "object"
				},
				"modelDescription": "Render issue items from an issue search in a markdown table. The markdown table will be displayed directly to the user by the tool. No further display should be done after this!",
				"name": "github-pull-request_renderIssues",
				"tags": [
					"github",
					"issues",
					"render",
					"display"
				],
				"toolReferenceName": "renderIssues",
				"when": "config.githubPullRequests.experimental.chat"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "github.api.preloadPullRequest",
					"when": "false"
				},
				{
					"command": "pr.configureRemotes",
					"when": "gitHubOpenRepositoryCount != 0"
				},
				{
					"command": "pr.configurePRViewlet",
					"when": "gitHubOpenRepositoryCount != 0"
				},
				{
					"command": "pr.pick",
					"when": "false"
				},
				{
					"command": "pr.openChanges",
					"when": "false"
				},
				{
					"command": "pr.pickOnVscodeDev",
					"when": "false"
				},
				{
					"command": "pr.exit",
					"when": "github:inReviewMode"
				},
				{
					"command": "pr.dismissNotification",
					"when": "false"
				},
				{
					"command": "pr.resetViewedFiles",
					"when": "github:inReviewMode"
				},
				{
					"command": "review.openFile",
					"when": "false"
				},
				{
					"command": "review.openLocalFile",
					"when": "false"
				},
				{
					"command": "pr.close",
					"when": "gitHubOpenRepositoryCount != 0 && github:inReviewMode"
				},
				{
					"command": "pr.create",
					"when": "gitHubOpenRepositoryCount != 0 && github:authenticated"
				},
				{
					"command": "pr.pushAndCreate",
					"when": "false"
				},
				{
					"command": "pr.merge",
					"when": "gitHubOpenRepositoryCount != 0 && github:inReviewMode"
				},
				{
					"command": "pr.readyForReview",
					"when": "gitHubOpenRepositoryCount != 0 && github:inReviewMode"
				},
				{
					"command": "pr.openPullRequestOnGitHub",
					"when": "gitHubOpenRepositoryCount != 0 && github:inReviewMode"
				},
				{
					"command": "pr.openAllDiffs",
					"when": "gitHubOpenRepositoryCount != 0 && github:inReviewMode"
				},
				{
					"command": "pr.refreshDescription",
					"when": "gitHubOpenRepositoryCount != 0 && github:inReviewMode"
				},
				{
					"command": "pr.openFileOnGitHub",
					"when": "false"
				},
				{
					"command": "pr.openOriginalFile",
					"when": "false"
				},
				{
					"command": "pr.openModifiedFile",
					"when": "false"
				},
				{
					"command": "pr.refreshPullRequest",
					"when": "false"
				},
				{
					"command": "pr.deleteLocalBranch",
					"when": "false"
				},
				{
					"command": "pr.openDiffView",
					"when": "false"
				},
				{
					"command": "pr.openDiffViewFromEditor",
					"when": "false"
				},
				{
					"command": "pr.openDescriptionToTheSide",
					"when": "false"
				},
				{
					"command": "pr.openDescription",
					"when": "gitHubOpenRepositoryCount != 0 && github:inReviewMode"
				},
				{
					"command": "pr.focusDescriptionInput",
					"when": "github:pullRequestDescriptionVisible"
				},
				{
					"command": "pr.showDiffSinceLastReview",
					"when": "false"
				},
				{
					"command": "pr.showDiffAll",
					"when": "false"
				},
				{
					"command": "pr.closeRelatedEditors",
					"when": "gitHubOpenRepositoryCount != 0"
				},
				{
					"command": "pr.toggleEditorCommentingOn",
					"when": "false"
				},
				{
					"command": "pr.toggleEditorCommentingOff",
					"when": "false"
				},
				{
					"command": "review.suggestDiff",
					"when": "false"
				},
				{
					"command": "review.approve",
					"when": "false"
				},
				{
					"command": "review.comment",
					"when": "false"
				},
				{
					"command": "review.requestChanges",
					"when": "false"
				},
				{
					"command": "review.approveOnDotCom",
					"when": "false"
				},
				{
					"command": "review.requestChangesOnDotCom",
					"when": "false"
				},
				{
					"command": "review.approveDescription",
					"when": "false"
				},
				{
					"command": "review.commentDescription",
					"when": "false"
				},
				{
					"command": "review.requestChangesDescription",
					"when": "false"
				},
				{
					"command": "review.approveOnDotComDescription",
					"when": "false"
				},
				{
					"command": "review.requestChangesOnDotComDescription",
					"when": "false"
				},
				{
					"command": "review.createSuggestionsFromChanges",
					"when": "false"
				},
				{
					"command": "review.createSuggestionFromChange",
					"when": "activeEditor == workbench.editors.textDiffEditor && (resourcePath in github:unviewedFiles || resourcePath in github:viewedFiles)"
				},
				{
					"command": "pr.refreshList",
					"when": "gitHubOpenRepositoryCount != 0 && github:authenticated && github:hasGitHubRemotes"
				},
				{
					"command": "pr.setFileListLayoutAsTree",
					"when": "false"
				},
				{
					"command": "pr.setFileListLayoutAsFlat",
					"when": "false"
				},
				{
					"command": "pr.refreshChanges",
					"when": "false"
				},
				{
					"command": "pr.signin",
					"when": "gitHubOpenRepositoryCount != 0 && github:hasGitHubRemotes"
				},
				{
					"command": "pr.signinNoEnterprise",
					"when": "false"
				},
				{
					"command": "pr.signinenterprise",
					"when": "gitHubOpenRepositoryCount != 0 && github:hasGitHubRemotes"
				},
				{
					"command": "pr.signinAndRefreshList",
					"when": "false"
				},
				{
					"command": "pr.copyCommitHash",
					"when": "false"
				},
				{
					"command": "pr.createComment",
					"when": "false"
				},
				{
					"command": "pr.createSingleComment",
					"when": "false"
				},
				{
					"command": "pr.makeSuggestion",
					"when": "false"
				},
				{
					"command": "pr.startReview",
					"when": "false"
				},
				{
					"command": "pr.editComment",
					"when": "false"
				},
				{
					"command": "pr.cancelEditComment",
					"when": "false"
				},
				{
					"command": "pr.saveComment",
					"when": "false"
				},
				{
					"command": "pr.deleteComment",
					"when": "false"
				},
				{
					"command": "pr.unresolveReviewThread",
					"when": "false"
				},
				{
					"command": "pr.unresolveReviewThreadFromView",
					"when": "false"
				},
				{
					"command": "pr.resolveReviewThread",
					"when": "false"
				},
				{
					"command": "pr.openReview",
					"when": "false"
				},
				{
					"command": "pr.editQuery",
					"when": "false"
				},
				{
					"command": "pr.markFileAsViewed",
					"when": "false"
				},
				{
					"command": "pr.unmarkFileAsViewed",
					"when": "false"
				},
				{
					"command": "pr.checkoutByNumber",
					"when": "gitHubOpenRepositoryCount != 0 && github:initialized && github:authenticated"
				},
				{
					"command": "pr.collapseAllComments",
					"when": "false"
				},
				{
					"command": "pr.copyVscodeDevPrLink",
					"when": "github:inReviewMode && remoteName != codespaces && embedderIdentifier != github.dev"
				},
				{
					"command": "pr.goToNextDiffInPr",
					"when": "activeEditor == workbench.editors.textDiffEditor && resourcePath in github:unviewedFiles"
				},
				{
					"command": "pr.goToNextDiffInPr",
					"when": "activeEditor == workbench.editors.textDiffEditor && resourcePath in github:viewedFiles"
				},
				{
					"command": "pr.goToPreviousDiffInPr",
					"when": "activeEditor == workbench.editors.textDiffEditor && resourcePath in github:unviewedFiles"
				},
				{
					"command": "pr.goToPreviousDiffInPr",
					"when": "activeEditor == workbench.editors.textDiffEditor && resourcePath in github:viewedFiles"
				},
				{
					"command": "pr.copyCommentLink",
					"when": "false"
				},
				{
					"command": "pr.addAssigneesToNewPr",
					"when": "false"
				},
				{
					"command": "pr.addReviewersToNewPr",
					"when": "false"
				},
				{
					"command": "pr.addLabelsToNewPr",
					"when": "false"
				},
				{
					"command": "pr.addMilestoneToNewPr",
					"when": "false"
				},
				{
					"command": "pr.addProjectsToNewPr",
					"when": "false"
				},
				{
					"command": "pr.preReview",
					"when": "false"
				},
				{
					"command": "pr.addFileComment",
					"when": "false"
				},
				{
					"command": "review.diffWithPrHead",
					"when": "false"
				},
				{
					"command": "review.diffLocalWithPrHead",
					"when": "false"
				},
				{
					"command": "pr.createPrMenuCreate",
					"when": "false"
				},
				{
					"command": "pr.createPrMenuDraft",
					"when": "false"
				},
				{
					"command": "pr.createPrMenuMergeWhenReady",
					"when": "false"
				},
				{
					"command": "pr.createPrMenuMerge",
					"when": "false"
				},
				{
					"command": "pr.createPrMenuSquash",
					"when": "false"
				},
				{
					"command": "pr.createPrMenuRebase",
					"when": "false"
				},
				{
					"command": "pr.refreshComments",
					"when": "gitHubOpenRepositoryCount != 0"
				},
				{
					"command": "pr.resolveConflict",
					"when": "false"
				},
				{
					"command": "pr.acceptMerge",
					"when": "isMergeResultEditor && mergeEditorBaseUri =~ /^(githubpr|gitpr):/"
				},
				{
					"command": "issue.copyGithubPermalink",
					"when": "github:hasGitHubRemotes"
				},
				{
					"command": "issue.copyGithubHeadLink",
					"when": "github:hasGitHubRemotes"
				},
				{
					"command": "issue.copyMarkdownGithubPermalink",
					"when": "github:hasGitHubRemotes"
				},
				{
					"command": "issue.openGithubPermalink",
					"when": "github:hasGitHubRemotes"
				},
				{
					"command": "issue.openIssue",
					"when": "false"
				},
				{
					"command": "issue.copyIssueNumber",
					"when": "false"
				},
				{
					"command": "issue.copyIssueUrl",
					"when": "false"
				},
				{
					"command": "issue.refresh",
					"when": "false"
				},
				{
					"command": "issue.suggestRefresh",
					"when": "false"
				},
				{
					"command": "issue.startWorking",
					"when": "false"
				},
				{
					"command": "issue.startWorkingBranchDescriptiveTitle",
					"when": "false"
				},
				{
					"command": "issue.continueWorking",
					"when": "false"
				},
				{
					"command": "issue.startWorkingBranchPrompt",
					"when": "false"
				},
				{
					"command": "issue.stopWorking",
					"when": "false"
				},
				{
					"command": "issue.stopWorkingBranchDescriptiveTitle",
					"when": "false"
				},
				{
					"command": "issue.statusBar",
					"when": "false"
				},
				{
					"command": "issue.getCurrent",
					"when": "false"
				},
				{
					"command": "issue.editQuery",
					"when": "false"
				},
				{
					"command": "issue.createIssue",
					"when": "github:hasGitHubRemotes && github:authenticated"
				},
				{
					"command": "issue.createIssueFromFile",
					"when": "false"
				},
				{
					"command": "issue.issueCompletion",
					"when": "false"
				},
				{
					"command": "issue.userCompletion",
					"when": "false"
				},
				{
					"command": "issue.signinAndRefreshList",
					"when": "false"
				},
				{
					"command": "issue.goToLinkedCode",
					"when": "false"
				},
				{
					"command": "issue.copyGithubDevLinkWithoutRange",
					"when": "false"
				},
				{
					"command": "issue.copyGithubDevLinkFile",
					"when": "false"
				},
				{
					"command": "issue.copyGithubDevLink",
					"when": "false"
				},
				{
					"command": "issue.copyGithubPermalinkWithoutRange",
					"when": "false"
				},
				{
					"command": "issue.copyMarkdownGithubPermalinkWithoutRange",
					"when": "false"
				},
				{
					"command": "issue.copyGithubHeadLinkWithoutRange",
					"when": "false"
				},
				{
					"command": "pr.refreshActivePullRequest",
					"when": "false"
				},
				{
					"command": "pr.applySuggestion",
					"when": "false"
				},
				{
					"command": "pr.applySuggestionWithCopilot",
					"when": "false"
				},
				{
					"command": "pr.openPullsWebsite",
					"when": "github:hasGitHubRemotes"
				},
				{
					"command": "issues.openIssuesWebsite",
					"when": "github:hasGitHubRemotes"
				},
				{
					"command": "issue.chatSummarizeIssue",
					"when": "false"
				},
				{
					"command": "issue.chatSuggestFix",
					"when": "false"
				},
				{
					"command": "notifications.sortByTimestamp",
					"when": "false"
				},
				{
					"command": "notifications.sortByPriority",
					"when": "false"
				},
				{
					"command": "notifications.loadMore",
					"when": "false"
				},
				{
					"command": "notifications.refresh",
					"when": "false"
				},
				{
					"command": "notification.openOnGitHub",
					"when": "false"
				},
				{
					"command": "notification.markAsRead",
					"when": "false"
				},
				{
					"command": "notification.chatSummarizeNotification",
					"when": "false"
				},
				{
					"command": "review.copyPrLink",
					"when": "github:inReviewMode"
				}
			],
			"comments/comment/context": [
				{
					"command": "pr.saveComment",
					"group": "inline@1",
					"when": "commentController =~ /^github-(browse|review)/"
				},
				{
					"command": "pr.cancelEditComment",
					"group": "inline@2",
					"when": "commentController =~ /^github-(browse|review)/"
				}
			],
			"comments/comment/editorActions": [
				{
					"command": "pr.makeSuggestion",
					"group": "inline@3",
					"when": "commentController =~ /^github-(browse|review)/ && !github:activeCommentHasSuggestion"
				}
			],
			"comments/comment/title": [
				{
					"command": "pr.copyCommentLink",
					"group": "inline@1",
					"when": "commentController =~ /^github-(browse|review)/ && comment =~ /canEdit/"
				},
				{
					"command": "pr.applySuggestion",
					"group": "inline@0",
					"when": "commentController =~ /^github-review/ && comment =~ /hasSuggestion/"
				},
				{
					"command": "pr.applySuggestionWithCopilot",
					"group": "inline@0",
					"when": "commentController =~ /^github-review/ && !(comment =~ /hasSuggestion/)"
				},
				{
					"command": "pr.editComment",
					"group": "inline@2",
					"when": "commentController =~ /^github-(browse|review)/ && comment =~ /canEdit/"
				},
				{
					"command": "pr.deleteComment",
					"group": "inline@3",
					"when": "commentController =~ /^github-(browse|review)/ && comment =~ /canDelete/"
				}
			],
			"comments/commentThread/additionalActions": [
				{
					"command": "pr.resolveReviewThread",
					"group": "inline@1",
					"when": "commentController =~ /^github-(browse|review)/ && commentThread =~ /canResolve/"
				},
				{
					"command": "pr.setFileListLayoutAsTree",
					"group": "navigation1",
					"when": "view == prStatus:github && fileListLayout:flat"
				},
				{
					"command": "pr.setFileListLayoutAsFlat",
					"group": "navigation1",
					"when": "view == prStatus:github && !fileListLayout:flat"
				},
				{
					"command": "pr.toggleEditorCommentingOn",
					"group": "navigation@0",
					"when": "view == prStatus:github && !commentingEnabled"
				},
				{
					"command": "pr.toggleEditorCommentingOff",
					"group": "navigation@0",
					"when": "view == prStatus:github && commentingEnabled"
				},
				{
					"command": "pr.unresolveReviewThread",
					"when": "commentController =~ /^github-(browse|review)/ && commentThread =~ /canUnresolve/"
				},
				{
					"command": "pr.applySuggestion",
					"when": "commentController =~ /^github-review/ && comment =~ /hasSuggestion/"
				},
				{
					"command": "pr.applySuggestionWithCopilot",
					"when": "commentController =~ /^github-review/ && !(comment =~ /hasSuggestion/)"
				}
			],
			"comments/commentThread/context": [
				{
					"command": "pr.createComment",
					"group": "inline@1",
					"when": "(commentController =~ /^github-browse/ && prInDraft) || (commentController =~ /^github-review/ && reviewInDraftMode)"
				},
				{
					"command": "pr.createSingleComment",
					"group": "inline@1",
					"when": "config.githubPullRequests.defaultCommentType != review && ((commentController =~ /^github-browse/ && !prInDraft) || (commentController =~ /^github-review/ && !reviewInDraftMode))"
				},
				{
					"command": "pr.startReview",
					"group": "inline@1",
					"when": "config.githubPullRequests.defaultCommentType == review && ((commentController =~ /^github-browse/ && !prInDraft) || (commentController =~ /^github-review/ && !reviewInDraftMode))"
				},
				{
					"command": "pr.startReview",
					"group": "inline@2",
					"when": "config.githubPullRequests.defaultCommentType != review && ((commentController =~ /^github-browse/ && !prInDraft) || (commentController =~ /^github-review/ && !reviewInDraftMode))"
				},
				{
					"command": "pr.createSingleComment",
					"group": "inline@2",
					"when": "config.githubPullRequests.defaultCommentType == review && ((commentController =~ /^github-browse/ && !prInDraft) || commentController =~ /^github-review/ && !reviewInDraftMode)"
				}
			],
			"comments/commentThread/title": [
				{
					"command": "pr.refreshComments",
					"group": "0_refresh@0",
					"when": "commentController =~ /^github-(browse|review)/"
				},
				{
					"command": "pr.collapseAllComments",
					"group": "1_collapse@0",
					"when": "commentController =~ /^github-(browse|review)/"
				}
			],
			"comments/commentThread/title/context": [
				{
					"command": "pr.resolveReviewThread",
					"group": "inline@3",
					"when": "commentController =~ /^github-(browse|review)/ && commentThread =~ /canResolve/"
				},
				{
					"command": "pr.unresolveReviewThread",
					"group": "inline@3",
					"when": "commentController =~ /^github-(browse|review)/ && commentThread =~ /canUnresolve/"
				}
			],
			"commentsView/commentThread/context": [
				{
					"command": "pr.diffOutdatedCommentWithHead",
					"group": "inline@0",
					"when": "commentController =~ /^github-(browse|review)/ && commentThread =~ /outdated/"
				},
				{
					"command": "pr.resolveReviewThread",
					"group": "inline@1",
					"when": "commentController =~ /^github-(browse|review)/ && commentThread =~ /canResolve/"
				},
				{
					"command": "pr.unresolveReviewThreadFromView",
					"group": "inline@1",
					"when": "commentController =~ /^github-(browse|review)/ && commentThread =~ /canUnresolve/"
				},
				{
					"command": "pr.diffOutdatedCommentWithHead",
					"group": "context@0",
					"when": "commentController =~ /^github-(browse|review)/ && commentThread =~ /outdated/"
				},
				{
					"command": "pr.resolveReviewThread",
					"group": "context@1",
					"when": "commentController =~ /^github-(browse|review)/ && commentThread =~ /canResolve/"
				},
				{
					"command": "pr.unresolveReviewThreadFromView",
					"group": "context@1",
					"when": "commentController =~ /^github-(browse|review)/ && commentThread =~ /canUnresolve/"
				}
			],
			"editor/content": [
				{
					"command": "pr.acceptMerge",
					"when": "isMergeResultEditor && mergeEditorBaseUri =~ /^(githubpr|gitpr):/"
				}
			],
			"editor/context": [
				{
					"command": "review.createSuggestionFromChange",
					"group": "2_git@6",
					"when": "activeEditor == workbench.editors.textDiffEditor && (resourcePath in github:unviewedFiles || resourcePath in github:viewedFiles)"
				}
			],
			"editor/context/copy": [
				{
					"command": "issue.copyGithubPermalink",
					"group": "3_githubPullRequests@0",
					"when": "github:hasGitHubRemotes"
				},
				{
					"command": "issue.copyMarkdownGithubPermalink",
					"group": "3_githubPullRequests@1",
					"when": "github:hasGitHubRemotes"
				},
				{
					"command": "issue.copyGithubHeadLink",
					"group": "3_githubPullRequests@2",
					"when": "github:hasGitHubRemotes"
				}
			],
			"editor/context/share": [
				{
					"command": "issue.copyGithubPermalink",
					"group": "1_githubPullRequests@0",
					"when": "github:hasGitHubRemotes"
				},
				{
					"command": "issue.copyMarkdownGithubPermalink",
					"group": "1_githubPullRequests@1",
					"when": "github:hasGitHubRemotes"
				},
				{
					"command": "issue.copyGithubHeadLink",
					"group": "1_githubPullRequests@2",
					"when": "github:hasGitHubRemotes"
				},
				{
					"command": "issue.copyGithubDevLink",
					"group": "0_vscode@0",
					"when": "github:hasGitHubRemotes && remoteName == codespaces && isWeb || github:hasGitHubRemotes && embedderIdentifier == github.dev"
				}
			],
			"editor/lineNumber/context": [
				{
					"command": "issue.copyGithubPermalink",
					"group": "1_cutcopypaste@3",
					"when": "github:hasGitHubRemotes && activeEditor == workbench.editors.files.textFileEditor && config.editor.lineNumbers == on"
				},
				{
					"command": "issue.copyMarkdownGithubPermalink",
					"group": "1_cutcopypaste@4",
					"when": "github:hasGitHubRemotes && activeEditor == workbench.editors.files.textFileEditor && config.editor.lineNumbers == on"
				},
				{
					"command": "issue.copyGithubHeadLink",
					"group": "1_cutcopypaste@5",
					"when": "github:hasGitHubRemotes && activeEditor == workbench.editors.files.textFileEditor && config.editor.lineNumbers == on"
				},
				{
					"command": "issue.copyGithubDevLink",
					"group": "1_cutcopypaste@0",
					"when": "github:hasGitHubRemotes && remoteName == codespaces && isWeb || github:hasGitHubRemotes && embedderIdentifier == github.dev"
				}
			],
			"editor/title": [
				{
					"command": "review.openFile",
					"group": "navigation",
					"when": "resourceScheme =~ /^review$/ && isInDiffEditor"
				},
				{
					"command": "review.openLocalFile",
					"group": "navigation",
					"when": "resourceScheme =~ /^review$/ && !isInDiffEditor"
				},
				{
					"command": "issue.createIssueFromFile",
					"group": "navigation",
					"when": "resourceFilename == NewIssue.md"
				},
				{
					"command": "pr.markFileAsViewed",
					"group": "navigation",
					"when": "resourceScheme != pr && resourceScheme != review && resourceScheme != filechange && resourcePath in github:unviewedFiles"
				},
				{
					"command": "pr.unmarkFileAsViewed",
					"group": "navigation",
					"when": "resourceScheme != pr && resourceScheme != review && resourceScheme != filechange && resourcePath in github:viewedFiles"
				},
				{
					"command": "pr.openDiffViewFromEditor",
					"group": "navigation",
					"when": "!isInDiffEditor && resourceScheme != pr && resourceScheme != review && resourceScheme != filechange && resourcePath in github:unviewedFiles"
				},
				{
					"command": "pr.openDiffViewFromEditor",
					"group": "navigation",
					"when": "!isInDiffEditor && resourceScheme != pr && resourceScheme != review && resourceScheme != filechange && resourcePath in github:viewedFiles"
				},
				{
					"command": "pr.addFileComment",
					"group": "navigation",
					"when": "(resourceScheme == pr) || (resourcePath in github:viewedFiles) || (resourcePath in github:unviewedFiles)"
				}
			],
			"editor/title/context": [
				{
					"command": "pr.closeRelatedEditors",
					"group": "1_close@60",
					"when": "resourceScheme == 'pr' || resourceScheme == 'review' || resourcePath in github:unviewedFiles || resourcePath in github:viewedFiles"
				}
			],
			"editor/title/context/share": [
				{
					"command": "issue.copyGithubPermalinkWithoutRange",
					"group": "1_githubPullRequests@10",
					"when": "github:hasGitHubRemotes"
				},
				{
					"command": "issue.copyMarkdownGithubPermalinkWithoutRange",
					"group": "1_githubPullRequests@11",
					"when": "github:hasGitHubRemotes"
				},
				{
					"command": "issue.copyGithubHeadLinkWithoutRange",
					"group": "1_githubPullRequests@12",
					"when": "github:hasGitHubRemotes"
				},
				{
					"command": "issue.copyGithubDevLinkWithoutRange",
					"group": "0_vscode@0",
					"when": "github:hasGitHubRemotes && remoteName == codespaces && isWeb || github:hasGitHubRemotes && embedderIdentifier == github.dev"
				}
			],
			"explorer/context/share": [
				{
					"command": "issue.copyGithubPermalinkWithoutRange",
					"group": "5_githubPulLRequests@10",
					"when": "github:hasGitHubRemotes"
				},
				{
					"command": "issue.copyMarkdownGithubPermalinkWithoutRange",
					"group": "5_githubPulLRequests@11",
					"when": "github:hasGitHubRemotes"
				},
				{
					"command": "issue.copyGithubHeadLinkWithoutRange",
					"group": "5_githubPulLRequests@12",
					"when": "github:hasGitHubRemotes"
				},
				{
					"command": "issue.copyGithubDevLinkWithoutRange",
					"group": "0_vscode@0",
					"when": "github:hasGitHubRemotes && remoteName == codespaces && isWeb || github:hasGitHubRemotes && embedderIdentifier == github.dev"
				}
			],
			"file/share": [
				{
					"command": "issue.copyGithubPermalink",
					"group": "1_githubPullRequests@0",
					"when": "github:hasGitHubRemotes"
				},
				{
					"command": "pr.copyVscodeDevPrLink",
					"group": "1_githubPullRequests@1",
					"when": "github:hasGitHubRemotes && github:inReviewMode && remoteName != codespaces && embedderIdentifier != github.dev"
				},
				{
					"command": "issue.copyMarkdownGithubPermalink",
					"group": "1_githubPullRequests@2",
					"when": "github:hasGitHubRemotes"
				},
				{
					"command": "issue.copyGithubHeadLink",
					"group": "1_githubPullRequests@3",
					"when": "github:hasGitHubRemotes"
				},
				{
					"command": "issue.copyGithubDevLinkFile",
					"group": "0_vscode@0",
					"when": "github:hasGitHubRemotes && remoteName == codespaces && isWeb || github:hasGitHubRemotes && embedderIdentifier == github.dev"
				}
			],
			"menuBar/edit/copy": [
				{
					"command": "issue.copyGithubPermalink",
					"when": "github:hasGitHubRemotes"
				},
				{
					"command": "issue.copyMarkdownGithubPermalink",
					"when": "github:hasGitHubRemotes"
				}
			],
			"remoteHub/pullRequest": [
				{
					"command": "pr.create",
					"group": "1_modification@0",
					"when": "scmProvider =~ /^remoteHub:github/"
				}
			],
			"scm/resourceGroup/context": [
				{
					"command": "review.createSuggestionsFromChanges",
					"group": "inline@-2",
					"when": "scmProviderRootUri in github:reposInReviewMode && scmProvider =~ /^git|^remoteHub:github/ && scmResourceGroup == workingTree"
				}
			],
			"scm/resourceState/context": [
				{
					"command": "review.createSuggestionsFromChanges",
					"group": "1_modification@5",
					"when": "scmProviderRootUri in github:reposInReviewMode && scmProvider =~ /^git|^remoteHub:github/ && scmResourceGroup == workingTree"
				}
			],
			"scm/title": [
				{
					"command": "review.suggestDiff",
					"group": "inline",
					"when": "scmProvider =~ /^git|^remoteHub:github/ && scmProviderRootUri in github:reposInReviewMode"
				},
				{
					"command": "pr.create",
					"group": "navigation",
					"when": "scmProvider =~ /^git|^remoteHub:github/ && scmProviderRootUri in github:reposNotInReviewMode"
				}
			],
			"view/item/context": [
				{
					"command": "pr.pick",
					"group": "inline@0",
					"when": "view == pr:github && viewItem =~ /description:nonactive/"
				},
				{
					"command": "pr.pick",
					"group": "1_pullrequest@1",
					"when": "view == pr:github && viewItem =~ /(pullrequest(:local)?:nonactive)|(description:nonactive)/"
				},
				{
					"command": "pr.exit",
					"group": "1_pullrequest@1",
					"when": "view == pr:github && viewItem =~ /pullrequest(:local)?:active|description:active/"
				},
				{
					"command": "pr.pickOnVscodeDev",
					"group": "1_pullrequest@2",
					"when": "view == pr:github && viewItem =~ /pullrequest(:local)?:nonactive|description/ && (!isWeb || remoteName != codespaces && virtualWorkspace != vscode-vfs)"
				},
				{
					"command": "pr.openPullRequestOnGitHub",
					"group": "1_pullrequest@3",
					"when": "view == pr:github && viewItem =~ /pullrequest|description/"
				},
				{
					"command": "pr.refreshPullRequest",
					"group": "2_pullrequest@1",
					"when": "view == pr:github && viewItem =~ /pullrequest|description/"
				},
				{
					"command": "pr.deleteLocalBranch",
					"group": "3_pullrequest@4",
					"when": "view == pr:github && viewItem =~ /pullrequest:local:nonactive/"
				},
				{
					"command": "pr.dismissNotification",
					"group": "3_pullrequest@5",
					"when": "view == pr:github && viewItem =~ /pullrequest(.*):notification/"
				},
				{
					"command": "issue.chatSummarizeIssue",
					"group": "4_pullrequest@2",
					"when": "view == pr:github && viewItem =~ /pullrequest/ && github.copilot-chat.activated && config.githubPullRequests.experimental.chat"
				},
				{
					"command": "pr.openChanges",
					"group": "inline@1",
					"when": "view =~ /(pr|prStatus):github/ && viewItem =~ /description/ && config.multiDiffEditor.experimental.enabled"
				},
				{
					"command": "pr.showDiffSinceLastReview",
					"group": "inline@1",
					"when": "view =~ /(pr|prStatus):github/ && viewItem =~ /description:(active|nonactive):hasChangesSinceReview:showingAllChanges/"
				},
				{
					"command": "pr.showDiffAll",
					"group": "inline@1",
					"when": "view =~ /(pr|prStatus):github/ && viewItem =~ /description:(active|nonactive):hasChangesSinceReview:showingChangesSinceReview/"
				},
				{
					"command": "notification.chatSummarizeNotification",
					"group": "inline@1",
					"when": "view == notifications:github && (viewItem == 'Issue' || viewItem == 'PullRequest') && config.githubPullRequests.experimental.notificationsView && config.githubPullRequests.experimental.chat"
				},
				{
					"command": "notification.chatSummarizeNotification",
					"group": "issues_0@0",
					"when": "view == notifications:github && (viewItem == 'Issue' || viewItem == 'PullRequest') && config.githubPullRequests.experimental.notificationsView && config.githubPullRequests.experimental.chat"
				},
				{
					"command": "notification.openOnGitHub",
					"group": "inline@2",
					"when": "view == notifications:github && (viewItem == 'Issue' || viewItem == 'PullRequest') && config.githubPullRequests.experimental.notificationsView"
				},
				{
					"command": "notification.openOnGitHub",
					"group": "issues_0@1",
					"when": "view == notifications:github && (viewItem == 'Issue' || viewItem == 'PullRequest') && config.githubPullRequests.experimental.notificationsView"
				},
				{
					"command": "notification.markAsRead",
					"group": "inline@3",
					"when": "view == notifications:github && (viewItem == 'Issue' || viewItem == 'PullRequest') && config.githubPullRequests.experimental.notificationsView"
				},
				{
					"command": "notification.markAsRead",
					"group": "issues_0@2",
					"when": "view == notifications:github && (viewItem == 'Issue' || viewItem == 'PullRequest') && config.githubPullRequests.experimental.notificationsView"
				},
				{
					"command": "pr.openDescriptionToTheSide",
					"group": "inline@2",
					"when": "view =~ /(pr|prStatus):github/ && viewItem =~ /description/"
				},
				{
					"command": "pr.openPullRequestOnGitHub",
					"group": "inline@3",
					"when": "view == prStatus:github && viewItem =~ /description/ && github:activePRCount >= 2"
				},
				{
					"command": "pr.copyCommitHash",
					"when": "view == prStatus:github && viewItem =~ /commit/"
				},
				{
					"command": "review.openFile",
					"group": "inline@0",
					"when": "openDiffOnClick && showInlineOpenFileAction && view == prStatus:github && viewItem =~ /filechange(?!:DELETE)/"
				},
				{
					"command": "pr.openDiffView",
					"group": "inline@0",
					"when": "!openDiffOnClick && showInlineOpenFileAction && view == prStatus:github && viewItem =~ /filechange(?!:DELETE)/"
				},
				{
					"command": "pr.openFileOnGitHub",
					"group": "0_open@0",
					"when": "view =~ /(pr|prStatus):github/ && viewItem =~ /filechange/"
				},
				{
					"command": "pr.openOriginalFile",
					"group": "0_open@1",
					"when": "view =~ /(pr|prStatus):github/ && viewItem =~ /filechange:MODIFY/"
				},
				{
					"command": "pr.openModifiedFile",
					"group": "0_open@2",
					"when": "view =~ /(pr|prStatus):github/ && viewItem =~ /filechange:MODIFY/"
				},
				{
					"command": "review.diffWithPrHead",
					"group": "1_diff@0",
					"when": "openDiffOnClick && view == prStatus:github && viewItem =~ /filechange(?!:DELETE)/"
				},
				{
					"command": "review.diffLocalWithPrHead",
					"group": "1_diff@1",
					"when": "openDiffOnClick && view == prStatus:github && viewItem =~ /filechange(?!:DELETE)/"
				},
				{
					"command": "pr.editQuery",
					"group": "inline",
					"when": "view == pr:github && viewItem == query"
				},
				{
					"command": "pr.editQuery",
					"when": "view == pr:github && viewItem == query"
				},
				{
					"command": "issue.openIssue",
					"group": "inline@1",
					"when": "view == issues:github && viewItem =~ /^(link)?(current|continue)?issue/"
				},
				{
					"command": "issue.chatSummarizeIssue",
					"group": "inline@0",
					"when": "view == issues:github && viewItem =~ /^(link)?(current|continue)?issue/ && github.copilot-chat.activated && config.githubPullRequests.experimental.chat"
				},
				{
					"command": "issue.chatSummarizeIssue",
					"group": "inline@0",
					"when": "view == pr:github && viewItem =~ /pullrequest/ && github.copilot-chat.activated && config.githubPullRequests.experimental.chat"
				},
				{
					"command": "issue.openIssue",
					"group": "issues_0@1",
					"when": "view == issues:github && viewItem =~ /^(link)?(current|continue)?issue/"
				},
				{
					"command": "issue.goToLinkedCode",
					"group": "issues_0@0",
					"when": "view == issues:github && viewItem =~ /^link(current|continue)?issue/"
				},
				{
					"command": "issue.startWorking",
					"group": "inline@2",
					"when": "view == issues:github && viewItem =~ /^(link)?issue/ && config.githubIssues.useBranchForIssues != on"
				},
				{
					"command": "issue.startWorkingBranchDescriptiveTitle",
					"group": "inline@2",
					"when": "view == issues:github && viewItem =~ /^(link)?issue/ && config.githubIssues.useBranchForIssues == on"
				},
				{
					"command": "issue.startWorking",
					"group": "inline@2",
					"when": "view == issues:github && viewItem =~ /^(link)?continueissue/ && config.githubIssues.useBranchForIssues != on"
				},
				{
					"command": "issue.startWorkingBranchDescriptiveTitle",
					"group": "inline@2",
					"when": "view == issues:github && viewItem =~ /^(link)?continueissue/ && config.githubIssues.useBranchForIssues == on"
				},
				{
					"alt": "issue.startWorkingBranchPrompt",
					"command": "issue.startWorking",
					"group": "issues_0@2",
					"when": "view == issues:github && viewItem =~ /^(link)?issue/"
				},
				{
					"command": "issue.continueWorking",
					"group": "issues_0@2",
					"when": "view == issues:github && viewItem =~ /^(link)?continueissue/"
				},
				{
					"command": "pr.create",
					"group": "issues_0@2",
					"when": "view == issues:github && viewItem =~ /^(link)?currentissue/"
				},
				{
					"command": "issue.stopWorking",
					"group": "issues_0@3",
					"when": "view == issues:github && viewItem =~ /^(link)?currentissue/"
				},
				{
					"command": "issue.stopWorking",
					"group": "inline@1",
					"when": "view == issues:github && viewItem =~ /^(link)?currentissue/ && config.githubIssues.useBranchForIssues != on"
				},
				{
					"command": "issue.stopWorkingBranchDescriptiveTitle",
					"group": "inline@1",
					"when": "view == issues:github && viewItem =~ /^(link)?currentissue/ && config.githubIssues.useBranchForIssues == on"
				},
				{
					"command": "issue.chatSummarizeIssue",
					"group": "issues_1@0",
					"when": "view == issues:github && viewItem =~ /^(link)?(current|continue)?issue/ && github.copilot-chat.activated && config.githubPullRequests.experimental.chat"
				},
				{
					"command": "issue.chatSuggestFix",
					"group": "issues_1@1",
					"when": "view == issues:github && viewItem =~ /^(link)?(current|continue)?issue/ && github.copilot-chat.activated && config.githubPullRequests.experimental.chat"
				},
				{
					"command": "issue.copyIssueNumber",
					"group": "issues_2@1",
					"when": "view == issues:github && viewItem =~ /^(link)?(current|continue)?issue/"
				},
				{
					"command": "issue.copyIssueUrl",
					"group": "issues_2@2",
					"when": "view == issues:github && viewItem =~ /^(link)?(current|continue)?issue/"
				},
				{
					"command": "issue.editQuery",
					"group": "inline",
					"when": "view == issues:github && viewItem == query"
				},
				{
					"command": "issue.editQuery",
					"when": "view == issues:github && viewItem == query"
				}
			],
			"view/title": [
				{
					"command": "pr.create",
					"group": "navigation@1",
					"when": "gitHubOpenRepositoryCount != 0 && github:initialized && view == pr:github"
				},
				{
					"command": "pr.refreshList",
					"group": "navigation@2",
					"when": "gitHubOpenRepositoryCount != 0 && github:initialized && view == pr:github"
				},
				{
					"command": "pr.openPullsWebsite",
					"group": "overflow@1",
					"when": "gitHubOpenRepositoryCount != 0 && github:initialized && view == pr:github"
				},
				{
					"command": "pr.checkoutByNumber",
					"group": "overflow@2",
					"when": "gitHubOpenRepositoryCount != 0 && github:initialized && view == pr:github"
				},
				{
					"command": "pr.configurePRViewlet",
					"group": "overflow@3",
					"when": "gitHubOpenRepositoryCount != 0 && github:initialized && view == pr:github"
				},
				{
					"command": "pr.refreshChanges",
					"group": "navigation@2",
					"when": "view == prStatus:github"
				},
				{
					"command": "pr.setFileListLayoutAsTree",
					"group": "navigation",
					"when": "view == prStatus:github && fileListLayout:flat"
				},
				{
					"command": "pr.setFileListLayoutAsFlat",
					"group": "navigation",
					"when": "view == prStatus:github && !fileListLayout:flat"
				},
				{
					"command": "issue.createIssue",
					"group": "navigation@1",
					"when": "view == issues:github && github:hasGitHubRemotes"
				},
				{
					"command": "issue.refresh",
					"group": "navigation@2",
					"when": "view == issues:github"
				},
				{
					"command": "issues.openIssuesWebsite",
					"group": "overflow@1",
					"when": "gitHubOpenRepositoryCount != 0 && github:initialized && view == issues:github"
				},
				{
					"command": "pr.configurePRViewlet",
					"group": "overflow@2",
					"when": "gitHubOpenRepositoryCount != 0 && github:initialized && view == issues:github"
				},
				{
					"command": "pr.refreshActivePullRequest",
					"group": "navigation@1",
					"when": "view == github:activePullRequest && github:hasGitHubRemotes"
				},
				{
					"command": "pr.openDescription",
					"group": "navigation@2",
					"when": "view == github:activePullRequest && github:hasGitHubRemotes"
				},
				{
					"command": "pr.openPullRequestOnGitHub",
					"group": "navigation@3",
					"when": "view == github:activePullRequest && github:hasGitHubRemotes"
				},
				{
					"command": "pr.addAssigneesToNewPr",
					"group": "navigation@1",
					"when": "view == github:createPullRequestWebview && github:createPrPermissions != READ && github:createPrPermissions"
				},
				{
					"command": "pr.addReviewersToNewPr",
					"group": "navigation@2",
					"when": "view == github:createPullRequestWebview && github:createPrPermissions != READ && github:createPrPermissions"
				},
				{
					"command": "pr.addLabelsToNewPr",
					"group": "navigation@3",
					"when": "view == github:createPullRequestWebview && github:createPrPermissions != READ && github:createPrPermissions"
				},
				{
					"command": "pr.addMilestoneToNewPr",
					"group": "navigation@4",
					"when": "view == github:createPullRequestWebview && github:createPrPermissions != READ && github:createPrPermissions"
				},
				{
					"command": "pr.addProjectsToNewPr",
					"group": "navigation@5",
					"when": "view == github:createPullRequestWebview && github:createPrPermissions != READ && github:createPrPermissions"
				},
				{
					"command": "pr.refreshComments",
					"group": "navigation",
					"when": "view == workbench.panel.comments"
				},
				{
					"command": "notifications.sortByTimestamp",
					"group": "sortNotifications@1",
					"when": "gitHubOpenRepositoryCount != 0 && github:initialized && view == notifications:github"
				},
				{
					"command": "notifications.sortByPriority",
					"group": "sortNotifications@2",
					"when": "gitHubOpenRepositoryCount != 0 && github:initialized && view == notifications:github"
				},
				{
					"command": "notifications.refresh",
					"group": "navigation@1",
					"when": "gitHubOpenRepositoryCount != 0 && github:initialized && view == notifications:github"
				}
			],
			"webview/context": [
				{
					"command": "pr.createPrMenuCreate",
					"group": "0_create@0",
					"when": "webviewId == 'github:createPullRequestWebview' && github:createPrMenu"
				},
				{
					"command": "pr.createPrMenuDraft",
					"group": "0_create@1",
					"when": "webviewId == 'github:createPullRequestWebview' && github:createPrMenu && github:createPrMenuDraft"
				},
				{
					"command": "pr.createPrMenuMergeWhenReady",
					"group": "1_create@0",
					"when": "webviewId == 'github:createPullRequestWebview' && github:createPrMenu && github:createPrMenuMergeWhenReady"
				},
				{
					"command": "pr.createPrMenuMerge",
					"group": "1_create@0",
					"when": "webviewId == 'github:createPullRequestWebview' && github:createPrMenu && github:createPrMenuMerge"
				},
				{
					"command": "pr.createPrMenuSquash",
					"group": "1_create@1",
					"when": "webviewId == 'github:createPullRequestWebview' && github:createPrMenu && github:createPrMenuSquash"
				},
				{
					"command": "pr.createPrMenuRebase",
					"group": "1_create@2",
					"when": "webviewId == 'github:createPullRequestWebview' && github:createPrMenu && github:createPrMenuRebase"
				},
				{
					"command": "review.approve",
					"when": "webviewId == 'github:activePullRequest' && github:reviewCommentMenu && github:reviewCommentApprove"
				},
				{
					"command": "review.comment",
					"when": "webviewId == 'github:activePullRequest' && github:reviewCommentMenu && github:reviewCommentComment"
				},
				{
					"command": "review.requestChanges",
					"when": "webviewId == 'github:activePullRequest' && github:reviewCommentMenu && github:reviewCommentRequestChanges"
				},
				{
					"command": "review.approveOnDotCom",
					"when": "webviewId == 'github:activePullRequest' && github:reviewCommentMenu && github:reviewCommentApproveOnDotCom"
				},
				{
					"command": "review.requestChangesOnDotCom",
					"when": "webviewId == 'github:activePullRequest' && github:reviewCommentMenu && github:reviewCommentRequestChangesOnDotCom"
				},
				{
					"command": "review.approveDescription",
					"when": "webviewId == PullRequestOverview && github:reviewCommentMenu && github:reviewCommentApprove"
				},
				{
					"command": "review.commentDescription",
					"when": "webviewId == PullRequestOverview && github:reviewCommentMenu && github:reviewCommentComment"
				},
				{
					"command": "review.requestChangesDescription",
					"when": "webviewId == PullRequestOverview && github:reviewCommentMenu && github:reviewCommentRequestChanges"
				},
				{
					"command": "review.approveOnDotComDescription",
					"when": "webviewId == PullRequestOverview && github:reviewCommentMenu && github:reviewCommentApproveOnDotCom"
				},
				{
					"command": "review.requestChangesOnDotComDescription",
					"when": "webviewId == PullRequestOverview && github:reviewCommentMenu && github:reviewCommentRequestChangesOnDotCom"
				}
			]
		},
		"resourceLabelFormatters": [
			{
				"formatting": {
					"label": "${path}",
					"separator": "/",
					"stripPathStartingSeparator": true,
					"workspaceSuffix": "GitHub"
				},
				"scheme": "review"
			}
		],
		"views": {
			"github-pull-request": [
				{
					"id": "github:createPullRequestWebview",
					"initialSize": 2,
					"name": "%view.github.create.pull.request.name%",
					"type": "webview",
					"visibility": "visible",
					"when": "github:createPullRequest || github:revertPullRequest"
				},
				{
					"id": "github:compareChangesFiles",
					"initialSize": 1,
					"name": "%view.github.compare.changes.name%",
					"visibility": "visible",
					"when": "github:createPullRequest"
				},
				{
					"id": "github:compareChangesCommits",
					"initialSize": 1,
					"name": "%view.github.compare.changesCommits.name%",
					"visibility": "visible",
					"when": "github:createPullRequest"
				},
				{
					"icon": "$(git-pull-request)",
					"id": "prStatus:github",
					"initialSize": 3,
					"name": "%view.pr.status.github.name%",
					"visibility": "visible",
					"when": "github:inReviewMode && !github:createPullRequest && !github:revertPullRequest"
				},
				{
					"id": "github:activePullRequest",
					"initialSize": 2,
					"name": "%view.github.active.pull.request.name%",
					"type": "webview",
					"when": "github:inReviewMode && github:focusedReview && !github:createPullRequest && !github:revertPullRequest && github:activePRCount <= 1"
				},
				{
					"id": "github:activePullRequest:welcome",
					"name": "%view.github.active.pull.request.welcome.name%",
					"when": "!github:stateValidated && github:focusedReview"
				}
			],
			"github-pull-requests": [
				{
					"icon": "$(git-pull-request)",
					"id": "github:login",
					"name": "%view.github.login.name%",
					"when": "ReposManagerStateContext == NeedsAuthentication"
				},
				{
					"accessibilityHelpContent": "%view.pr.github.accessibilityHelpContent%",
					"icon": "$(git-pull-request)",
					"id": "pr:github",
					"name": "%view.pr.github.name%",
					"when": "ReposManagerStateContext != NeedsAuthentication && !github:resolvingConflicts"
				},
				{
					"accessibilityHelpContent": "%view.pr.github.accessibilityHelpContent%",
					"icon": "$(issues)",
					"id": "issues:github",
					"name": "%view.issues.github.name%",
					"when": "ReposManagerStateContext != NeedsAuthentication && !github:resolvingConflicts"
				},
				{
					"accessibilityHelpContent": "%view.pr.github.accessibilityHelpContent%",
					"icon": "$(bell)",
					"id": "notifications:github",
					"name": "%view.notifications.github.name%",
					"when": "ReposManagerStateContext != NeedsAuthentication && !github:resolvingConflicts && config.githubPullRequests.experimental.notificationsView"
				},
				{
					"icon": "$(git-merge)",
					"id": "github:conflictResolution",
					"name": "%view.github.conflictResolution.name%",
					"when": "github:resolvingConflicts"
				}
			]
		},
		"viewsContainers": {
			"activitybar": [
				{
					"icon": "$(github)",
					"id": "github-pull-requests",
					"title": "%view.github.pull.requests.name%"
				},
				{
					"icon": "$(git-pull-request)",
					"id": "github-pull-request",
					"title": "%view.github.pull.request.name%"
				}
			]
		},
		"viewsWelcome": [
			{
				"contents": "%welcome.github.login.contents%",
				"view": "github:login",
				"when": "ReposManagerStateContext == NeedsAuthentication && github:hasGitHubRemotes"
			},
			{
				"contents": "%welcome.github.noGit.contents%",
				"view": "pr:github",
				"when": "gitNotInstalled"
			},
			{
				"contents": "%welcome.github.loginNoEnterprise.contents%",
				"view": "github:login",
				"when": "ReposManagerStateContext == NeedsAuthentication && !github:hasGitHubRemotes && gitOpenRepositoryCount"
			},
			{
				"contents": "%welcome.github.loginWithEnterprise.contents%",
				"view": "github:login",
				"when": "ReposManagerStateContext == NeedsAuthentication && !github:hasGitHubRemotes && gitOpenRepositoryCount"
			},
			{
				"contents": "%welcome.pr.github.uninitialized.contents%",
				"view": "pr:github",
				"when": "git.state != initialized && !github:initialized && workspaceFolderCount > 0"
			},
			{
				"contents": "%welcome.pr.github.uninitialized.contents%",
				"view": "pr:github",
				"when": "workspaceFolderCount > 0 && github:loadingPrsTree"
			},
			{
				"contents": "%welcome.pr.github.noFolder.contents%",
				"view": "pr:github",
				"when": "workspaceFolderCount == 0"
			},
			{
				"contents": "%welcome.pr.github.noRepo.contents%",
				"view": "pr:github",
				"when": "git.state == initialized && gitOpenRepositoryCount == 0 && workspaceFolderCount > 0 && git.parentRepositoryCount == 0"
			},
			{
				"contents": "%welcome.pr.github.parentRepo.contents%",
				"view": "pr:github",
				"when": "git.state == initialized && gitOpenRepositoryCount == 0 && workspaceFolderCount > 0 && git.parentRepositoryCount == 1"
			},
			{
				"contents": "%welcome.pr.github.parentRepo.contents%",
				"view": "pr:github",
				"when": "git.state == initialized && gitOpenRepositoryCount == 0 && workspaceFolderCount > 0 && git.parentRepositoryCount > 1"
			},
			{
				"contents": "%welcome.issues.github.uninitialized.contents%",
				"view": "issues:github",
				"when": "git.state != initialized && !github:initialized && workspaceFolderCount > 0"
			},
			{
				"contents": "%welcome.issues.github.uninitialized.contents%",
				"view": "issues:github",
				"when": "workspaceFolderCount > 0 && github:loadingPrsTree"
			},
			{
				"contents": "%welcome.issues.github.noFolder.contents%",
				"view": "issues:github",
				"when": "workspaceFolderCount == 0"
			},
			{
				"contents": "%welcome.issues.github.noRepo.contents%",
				"view": "issues:github",
				"when": "git.state == initialized && gitOpenRepositoryCount == 0 && workspaceFolderCount > 0 && git.parentRepositoryCount == 0"
			},
			{
				"contents": "%welcome.pr.github.parentRepo.contents%",
				"view": "issues:github",
				"when": "git.state == initialized && gitOpenRepositoryCount == 0 && workspaceFolderCount > 0 && git.parentRepositoryCount == 1"
			},
			{
				"contents": "%welcome.pr.github.parentRepo.contents%",
				"view": "issues:github",
				"when": "git.state == initialized && gitOpenRepositoryCount == 0 && workspaceFolderCount > 0 && git.parentRepositoryCount > 1"
			},
			{
				"contents": "%welcome.github.activePullRequest.contents%",
				"view": "github:activePullRequest:welcome",
				"when": "!github:stateValidated"
			}
		]
	},
	"activationEvents": [
		"onStartupFinished",
		"onFileSystem:newIssue",
		"onFileSystem:pr",
		"onFileSystem:githubpr",
		"onFileSystem:review"
	],
	"dependencies": {
		"@codeeditorland/prompt-tsx": "0.0.1",
		"@octokit/rest": "21.1.1",
		"@octokit/types": "13.8.0",
		"apollo-boost": "0.4.9",
		"apollo-link-context": "1.0.20",
		"cockatiel": "3.2.1",
		"cross-fetch": "4.1.0",
		"dayjs": "1.11.13",
		"debounce": "2.2.0",
		"events": "3.3.0",
		"fast-deep-equal": "3.1.3",
		"lru-cache": "11.0.2",
		"marked": "15.0.7",
		"ssh-config": "5.0.3",
		"stream-http": "3.2.0",
		"tunnel": "0.0.6",
		"url-search-params-polyfill": "8.2.5",
		"uuid": "11.0.5",
		"vsls": "1.0.4753"
	},
	"devDependencies": {
		"@types/chai": "5.0.1",
		"@types/glob": "8.1.0",
		"@types/lru-cache": "7.10.10",
		"@types/marked": "6.0.0",
		"@types/node": "22.13.4",
		"@types/sinon": "17.0.3",
		"@types/temp": "0.9.4",
		"assert": "2.1.0",
		"buffer": "6.0.3",
		"constants-browserify": "1.0.0",
		"crypto-browserify": "3.12.1",
		"css-loader": "7.1.2",
		"esbuild-loader": "4.3.0",
		"event-stream": "4.0.1",
		"glob": "11.0.1",
		"graphql": "16.10.0",
		"graphql-tag": "2.12.6",
		"jsdom": "26.0.0",
		"jsdom-global": "3.0.2",
		"json5": "2.2.3",
		"merge-options": "3.0.4",
		"minimist": "1.2.8",
		"mkdirp": "3.0.1",
		"os-browserify": "0.3.0",
		"p-all": "5.0.0",
		"path-browserify": "1.0.1",
		"process": "0.11.10",
		"raw-loader": "4.0.2",
		"sinon": "19.0.2",
		"source-map-support": "0.5.21",
		"stream-browserify": "3.0.0",
		"style-loader": "4.0.0",
		"svg-inline-loader": "0.8.2",
		"temp": "0.9.4",
		"timers-browserify": "2.0.12",
		"ts-loader": "9.5.2",
		"tty": "1.0.1",
		"typescript-formatter": "7.2.2",
		"vinyl-fs": "4.0.0"
	},
	"extensionDependencies": [
		"vscode.github-authentication"
	],
	"icon": "resources/icons/github_logo.png",
	"capabilities": {
		"untrustedWorkspaces": {
			"supported": true
		},
		"virtualWorkspaces": true
	},
	"enabledApiProposals": [
		"activeComment",
		"codiconDecoration",
		"codeActionRanges",
		"commentingRangeHint",
		"commentReactor",
		"commentReveal",
		"commentThreadApplicability",
		"contribAccessibilityHelpContent",
		"contribCommentEditorActionsMenu",
		"contribCommentPeekContext",
		"contribCommentThreadAdditionalMenu",
		"contribCommentsViewThreadMenus",
		"contribEditorContentMenu",
		"contribShareMenu",
		"diffCommand",
		"fileComments",
		"quickDiffProvider",
		"shareProvider",
		"tokenInformation",
		"treeViewMarkdownMessage"
	]
}
